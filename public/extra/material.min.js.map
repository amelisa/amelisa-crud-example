{"version":3,"sources":["mdlComponentHandler.js","tabs.js","layout.js","rAF.js","button.js","checkbox.js","icon-toggle.js","menu.js","progress.js","radio.js","slider.js","spinner.js","switch.js","textfield.js","tooltip.js","data-table.js","ripple.js","material.js"],"names":["MaterialTab","tab","ctx","element_","classList","contains","CssClasses_","MDL_JS_RIPPLE_EFFECT","rippleContainer","document","createElement","add","MDL_RIPPLE_CONTAINER","ripple","MDL_RIPPLE","appendChild","addEventListener","e","preventDefault","href","split","panel","querySelector","resetTabState_","resetPanelState_","ACTIVE_CLASS","MaterialLayoutTab","tabs","panels","layout","tabBar_","JS_RIPPLE_EFFECT","RIPPLE_CONTAINER","RIPPLE","content_","IS_ACTIVE","window","componentHandler","findRegisteredClass_","name","optReplace","i","registeredComponents_","length","className","undefined","getUpgradedListOfElement_","element","dataUpgraded","getAttribute","isElementUpgraded_","jsClass","upgradedList","indexOf","upgradeDomInternal","optJsClass","optCssClass","cssClass","registeredClass","elements","querySelectorAll","n","upgradeElementInternal","Element","Error","classesToUpgrade","push","forEach","component","setAttribute","join","instance","classConstructor","componentConfigProperty_","createdComponents_","j","m","callbacks","widget","ev","createEvent","initEvent","dispatchEvent","upgradeElementsInternal","Array","isArray","item","prototype","slice","call","HTMLElement","children","registerInternal","config","newConfig","constructor","classAsString","hasOwnProperty","found","registerUpgradedCallbackInternal","callback","regClass","upgradeAllRegisteredInternal","findCreatedComponentByNodeInternal","node","deconstructComponentInternal","downgradeMethod_","componentIndex","splice","upgrades","componentPlace","downgradeNodesInternal","nodes","downgradeNode","NodeList","Node","upgradeDom","upgradeElement","upgradeElements","upgradeAllRegistered","registerUpgradedCallback","register","downgradeElements","documentElement","ComponentConfig","Component","Date","now","getTime","vendors","requestAnimationFrame","vp","cancelAnimationFrame","test","navigator","userAgent","lastTime","nextTime","Math","max","setTimeout","clearTimeout","MaterialButton","this","init","Constant_","RIPPLE_EFFECT","blurHandler_","event","blur","disable","disabled","enable","rippleElement_","boundRippleBlurHandler","bind","boundButtonBlurHandler","mdlDowngrade_","removeEventListener","MaterialCheckbox","TINY_TIMEOUT","INPUT","BOX_OUTLINE","FOCUS_HELPER","TICK_OUTLINE","RIPPLE_IGNORE_EVENTS","RIPPLE_CENTER","IS_FOCUSED","IS_DISABLED","IS_CHECKED","IS_UPGRADED","onChange_","updateClasses_","onFocus_","onBlur_","remove","onMouseUp_","blur_","checkDisabled","checkToggleState","inputElement_","checked","check","uncheck","boxOutline","tickContainer","tickOutline","rippleContainerElement_","boundRippleMouseUp","boundInputOnChange","boundInputOnFocus","boundInputOnBlur","boundElementMouseUp","MaterialIconToggle","boundElementOnMouseUp","MaterialMenu","TRANSITION_DURATION_SECONDS","TRANSITION_DURATION_FRACTION","CLOSE_TIMEOUT","Keycodes_","ENTER","ESCAPE","SPACE","UP_ARROW","DOWN_ARROW","CONTAINER","OUTLINE","ITEM","ITEM_RIPPLE_CONTAINER","IS_VISIBLE","IS_ANIMATING","BOTTOM_LEFT","BOTTOM_RIGHT","TOP_LEFT","TOP_RIGHT","UNALIGNED","container","parentElement","insertBefore","removeChild","container_","outline","outline_","forElId","forEl","getElementById","forElement_","handleForClick_","handleForKeyboardEvent_","items","boundItemKeydown","handleItemKeyboardEvent_","boundItemClick","handleItemClick_","tabIndex","evt","rect","getBoundingClientRect","forRect","style","right","top","offsetTop","offsetHeight","left","offsetLeft","bottom","toggle","keyCode","focus","currentIndex","target","MouseEvent","click","hide","stopPropagation","closing_","applyClip_","height","width","clip","addAnimationEndListener_","cleanup","show","transitionDuration","itemDelay","transitionDelay","MaterialProgress","INDETERMINATE_CLASS","setProgress","p","progressbar_","setBuffer","bufferbar_","auxbar_","el","firstChild","MaterialRadio","JS_RADIO","RADIO_BTN","RADIO_OUTER_CIRCLE","RADIO_INNER_CIRCLE","radios","getElementsByClassName","button","btnElement_","onMouseup_","outerCircle","innerCircle","MaterialSlider","isIE_","msPointerEnabled","IE_CONTAINER","SLIDER_CONTAINER","BACKGROUND_FLEX","BACKGROUND_LOWER","BACKGROUND_UPPER","IS_LOWEST_VALUE","onInput_","updateValueStyles_","onContainerMouseDown_","newEvent","buttons","clientX","clientY","y","fraction","value","min","backgroundLower_","flex","webkitFlex","backgroundUpper_","change","containerIE","backgroundFlex","boundInputHandler","boundChangeHandler","boundMouseUpHandler","boundContainerMouseDownHandler","MaterialSpinner","MDL_SPINNER_LAYER_COUNT","MDL_SPINNER_LAYER","MDL_SPINNER_CIRCLE_CLIPPER","MDL_SPINNER_CIRCLE","MDL_SPINNER_GAP_PATCH","MDL_SPINNER_LEFT","MDL_SPINNER_RIGHT","createLayer","index","layer","leftClipper","gapPatch","rightClipper","circleOwners","circle","stop","start","MaterialSwitch","TRACK","THUMB","on","off","track","thumb","focusHelper","boundFocusHandler","boundBlurHandler","MaterialTabs","TAB_CLASS","PANEL_CLASS","UPGRADED_CLASS","MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS","initTabs_","tabs_","panels_","k","MaterialTextfield","maxRows","NO_MAX_ROWS","MAX_ROWS_ATTRIBUTE","LABEL","IS_DIRTY","IS_INVALID","onKeyDown_","currentRowCount","checkValidity","checkDirty","input_","validity","valid","label_","hasAttribute","parseInt","isNaN","boundUpdateClassesHandler","boundKeyDownHandler","MaterialTooltip","handleMouseEnter_","props","marginLeft","offsetWidth","boundMouseLeaveHandler","handleMouseLeave_","boundMouseEnterHandler","MaterialLayout","MAX_WIDTH","TAB_SCROLL_PIXELS","MENU_ICON","CHEVRON_LEFT","CHEVRON_RIGHT","Mode_","STANDARD","SEAMED","WATERFALL","SCROLL","INNER_CONTAINER","HEADER","DRAWER","CONTENT","DRAWER_BTN","ICON","HEADER_SEAMED","HEADER_WATERFALL","HEADER_SCROLL","FIXED_HEADER","OBFUSCATOR","TAB_BAR","TAB_CONTAINER","TAB","TAB_BAR_BUTTON","TAB_BAR_LEFT_BUTTON","TAB_BAR_RIGHT_BUTTON","PANEL","HAS_DRAWER","HAS_TABS","HAS_SCROLLING_HEADER","CASTING_SHADOW","IS_COMPACT","IS_SMALL_SCREEN","IS_DRAWER_OPEN","ON_LARGE_SCREEN","ON_SMALL_SCREEN","contentScrollHandler_","header_","scrollTop","screenSizeHandler_","screenSizeMediaQuery_","matches","drawer_","drawerToggleHandler_","headerTransitionEndHandler_","headerClickHandler_","tabBar","directChildren","childNodes","c","child","mode","matchMedia","addListener","drawerButton","drawerButtonIcon","textContent","obfuscator","tabContainer","leftButton","leftButtonIcon","scrollLeft","rightButton","rightButtonIcon","tabScrollHandler","scrollWidth","innerContainer","MaterialDataTable","DATA_TABLE","SELECTABLE","IS_SELECTED","selectRow_","checkbox","row","rows","createCheckbox_","label","type","firstHeader","th","headerCheckbox","firstCell","td","rowCheckbox","MaterialRipple","INITIAL_SCALE","INITIAL_SIZE","INITIAL_OPACITY","FINAL_OPACITY","FINAL_SCALE","RIPPLE_EFFECT_IGNORE_EVENTS","downHandler_","boundHeight","boundWidth","rippleSize_","sqrt","ignoringMouseDown_","frameCount","getFrameCount","setFrameCount","x","bound","currentTarget","round","touches","setRippleXY","setRippleStyles","animFrameHandler","upHandler_","detail","recentering","frameCount_","x_","y_","boundDownHandler","boundUpHandler","fC","getRippleElement","newX","newY","transformString","scale","size","offset","webkitTransform","msTransform","transform"],"mappings":"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","file":"material.min.js","sourcesContent":["/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A component handler interface using the revealing module design pattern.\n * More details on this design pattern here:\n * https://github.com/jasonmayes/mdl-component-design-pattern\n *\n * @author Jason Mayes.\n */\n/* exported componentHandler */\nwindow.componentHandler = (function() {\n  'use strict';\n\n  /** @type {!Array<componentHandler.ComponentConfig>} */\n  var registeredComponents_ = [];\n\n  /** @type {!Array<componentHandler.Component>} */\n  var createdComponents_ = [];\n\n  var downgradeMethod_ = 'mdlDowngrade_';\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';\n\n  /**\n   * Searches registered components for a class we are interested in using.\n   * Optionally replaces a match with passed object if specified.\n   *\n   * @param {String} name The name of a class we want to use.\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.\n   * @return {!Object|Boolean}\n   * @private\n   */\n  function findRegisteredClass_(name, optReplace) {\n    for (var i = 0; i < registeredComponents_.length; i++) {\n      if (registeredComponents_[i].className === name) {\n        if (optReplace !== undefined) {\n          registeredComponents_[i] = optReplace;\n        }\n        return registeredComponents_[i];\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns an array of the classNames of the upgraded classes on the element.\n   *\n   * @param {!HTMLElement} element The element to fetch data from.\n   * @return {!Array<String>}\n   * @private\n   */\n  function getUpgradedListOfElement_(element) {\n    var dataUpgraded = element.getAttribute('data-upgraded');\n    // Use `['']` as default value to conform the `,name,name...` style.\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');\n  }\n\n  /**\n   * Returns true if the given element has already been upgraded for the given\n   * class.\n   *\n   * @param {!HTMLElement} element The element we want to check.\n   * @param {String} jsClass The class to check for.\n   * @returns {Boolean}\n   * @private\n   */\n  function isElementUpgraded_(element, jsClass) {\n    var upgradedList = getUpgradedListOfElement_(element);\n    return upgradedList.indexOf(jsClass) !== -1;\n  }\n\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {String=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {String=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  function upgradeDomInternal(optJsClass, optCssClass) {\n    if (optJsClass === undefined && optCssClass === undefined) {\n      for (var i = 0; i < registeredComponents_.length; i++) {\n        upgradeDomInternal(registeredComponents_[i].className,\n            registeredComponents_[i].cssClass);\n      }\n    } else {\n      var jsClass = /** @type {String} */ (optJsClass);\n      if (optCssClass === undefined) {\n        var registeredClass = findRegisteredClass_(jsClass);\n        if (registeredClass) {\n          optCssClass = registeredClass.cssClass;\n        }\n      }\n\n      var elements = document.querySelectorAll('.' + optCssClass);\n      for (var n = 0; n < elements.length; n++) {\n        upgradeElementInternal(elements[n], jsClass);\n      }\n    }\n  }\n\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!HTMLElement} element The element we wish to upgrade.\n   * @param {String=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  function upgradeElementInternal(element, optJsClass) {\n    // Verify argument type.\n    if (!(typeof element === 'object' && element instanceof Element)) {\n      throw new Error('Invalid argument provided to upgrade MDL element.');\n    }\n    var upgradedList = getUpgradedListOfElement_(element);\n    var classesToUpgrade = [];\n    // If jsClass is not provided scan the registered components to find the\n    // ones matching the element's CSS classList.\n    if (!optJsClass) {\n      var classList = element.classList;\n      registeredComponents_.forEach(function(component) {\n        // Match CSS & Not to be upgraded & Not upgraded.\n        if (classList.contains(component.cssClass) &&\n            classesToUpgrade.indexOf(component) === -1 &&\n            !isElementUpgraded_(element, component.className)) {\n          classesToUpgrade.push(component);\n        }\n      });\n    } else if (!isElementUpgraded_(element, optJsClass)) {\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));\n    }\n\n    // Upgrade the element for each classes.\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {\n      registeredClass = classesToUpgrade[i];\n      if (registeredClass) {\n        // Mark element as upgraded.\n        upgradedList.push(registeredClass.className);\n        element.setAttribute('data-upgraded', upgradedList.join(','));\n        var instance = new registeredClass.classConstructor(element);\n        instance[componentConfigProperty_] = registeredClass;\n        createdComponents_.push(instance);\n        // Call any callbacks the user has registered with this component type.\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {\n          registeredClass.callbacks[j](element);\n        }\n\n        if (registeredClass.widget) {\n          // Assign per element instance for control over API\n          element[registeredClass.className] = instance;\n        }\n      } else {\n        throw new Error(\n          'Unable to find a registered component for the given class.');\n      }\n\n      var ev = document.createEvent('Events');\n      ev.initEvent('mdl-componentupgraded', true, true);\n      element.dispatchEvent(ev);\n    }\n  }\n\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!HTMLElement|!Array<!HTMLElement>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  function upgradeElementsInternal(elements) {\n    if (!Array.isArray(elements)) {\n      if (typeof elements.item === 'function') {\n        elements = Array.prototype.slice.call(/** @type {Array} */ (elements));\n      } else {\n        elements = [elements];\n      }\n    }\n    for (var i = 0, n = elements.length, element; i < n; i++) {\n      element = elements[i];\n      if (element instanceof HTMLElement) {\n        if (element.children.length > 0) {\n          upgradeElementsInternal(element.children);\n        }\n        upgradeElementInternal(element);\n      }\n    }\n  }\n\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {{constructor: !Function, classAsString: String, cssClass: String, widget: String}} config\n   */\n  function registerInternal(config) {\n    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({\n      'classConstructor': config.constructor,\n      'className': config.classAsString,\n      'cssClass': config.cssClass,\n      'widget': config.widget === undefined ? true : config.widget,\n      'callbacks': []\n    });\n\n    registeredComponents_.forEach(function(item) {\n      if (item.cssClass === newConfig.cssClass) {\n        throw new Error('The provided cssClass has already been registered.');\n      }\n      if (item.className === newConfig.className) {\n        throw new Error('The provided className has already been registered');\n      }\n    });\n\n    if (config.constructor.prototype\n        .hasOwnProperty(componentConfigProperty_)) {\n      throw new Error(\n          'MDL component classes must not have ' + componentConfigProperty_ +\n          ' defined as a property.');\n    }\n\n    var found = findRegisteredClass_(config.classAsString, newConfig);\n\n    if (!found) {\n      registeredComponents_.push(newConfig);\n    }\n  }\n\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {String} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  function registerUpgradedCallbackInternal(jsClass, callback) {\n    var regClass = findRegisteredClass_(jsClass);\n    if (regClass) {\n      regClass.callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  function upgradeAllRegisteredInternal() {\n    for (var n = 0; n < registeredComponents_.length; n++) {\n      upgradeDomInternal(registeredComponents_[n].className);\n    }\n  }\n\n  /**\n   * Finds a created component by a given DOM node.\n   *\n   * @param {!Node} node\n   * @return {*}\n   */\n  function findCreatedComponentByNodeInternal(node) {\n    for (var n = 0; n < createdComponents_.length; n++) {\n      var component = createdComponents_[n];\n      if (component.element_ === node) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * Check the component for the downgrade method.\n   * Execute if found.\n   * Remove component from createdComponents list.\n   *\n   * @param {*} component\n   */\n  function deconstructComponentInternal(component) {\n    if (component &&\n        component[componentConfigProperty_]\n          .classConstructor.prototype\n          .hasOwnProperty(downgradeMethod_)) {\n      component[downgradeMethod_]();\n      var componentIndex = createdComponents_.indexOf(component);\n      createdComponents_.splice(componentIndex, 1);\n\n      var upgrades = component.element_.getAttribute('data-upgraded').split(',');\n      var componentPlace = upgrades.indexOf(\n          component[componentConfigProperty_].classAsString);\n      upgrades.splice(componentPlace, 1);\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));\n\n      var ev = document.createEvent('Events');\n      ev.initEvent('mdl-componentdowngraded', true, true);\n      component.element_.dispatchEvent(ev);\n    }\n  }\n\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\n   */\n  function downgradeNodesInternal(nodes) {\n    var downgradeNode = function(node) {\n      deconstructComponentInternal(findCreatedComponentByNodeInternal(node));\n    };\n    if (nodes instanceof Array || nodes instanceof NodeList) {\n      for (var n = 0; n < nodes.length; n++) {\n        downgradeNode(nodes[n]);\n      }\n    } else if (nodes instanceof Node) {\n      downgradeNode(nodes);\n    } else {\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');\n    }\n  }\n\n  // Now return the functions that should be made public with their publicly\n  // facing names...\n  return {\n    upgradeDom: upgradeDomInternal,\n    upgradeElement: upgradeElementInternal,\n    upgradeElements: upgradeElementsInternal,\n    upgradeAllRegistered: upgradeAllRegisteredInternal,\n    registerUpgradedCallback: registerUpgradedCallbackInternal,\n    register: registerInternal,\n    downgradeElements: downgradeNodesInternal\n  };\n})();\n\nwindow.addEventListener('load', function() {\n  'use strict';\n\n  /**\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL\n   * components requiring JavaScript.\n   */\n  if ('classList' in document.createElement('div') &&\n      'querySelector' in document &&\n      'addEventListener' in window && Array.prototype.forEach) {\n    document.documentElement.classList.add('mdl-js');\n    componentHandler.upgradeAllRegistered();\n  } else {\n    componentHandler.upgradeElement =\n        componentHandler.register = function() {};\n  }\n});\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: !Function,\n *   className: String,\n *   cssClass: String,\n *   widget: String,\n *   callbacks: !Array<function(!HTMLElement)>\n * }}\n */\ncomponentHandler.ComponentConfig;  // jshint ignore:line\n\n/**\n * Created component (i.e., upgraded element) type as managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   element_: !HTMLElement,\n *   className: String,\n *   classAsString: String,\n *   cssClass: String,\n *   widget: String\n * }}\n */\ncomponentHandler.Component;  // jshint ignore:line\n","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Tabs MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTabs = function MaterialTabs(element) {\n    // Stores the HTML element.\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialTabs = MaterialTabs;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialTabs.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialTabs.prototype.CssClasses_ = {\n    TAB_CLASS: 'mdl-tabs__tab',\n    PANEL_CLASS: 'mdl-tabs__panel',\n    ACTIVE_CLASS: 'is-active',\n    UPGRADED_CLASS: 'is-upgraded',\n    MDL_JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    MDL_RIPPLE_CONTAINER: 'mdl-tabs__ripple-container',\n    MDL_RIPPLE: 'mdl-ripple',\n    MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events'\n};\n/**\n   * Handle clicks to a tabs component\n   *\n   * @private\n   */\nMaterialTabs.prototype.initTabs_ = function () {\n    if (this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS);\n    }\n    // Select element tabs, document panels\n    this.tabs_ = this.element_.querySelectorAll('.' + this.CssClasses_.TAB_CLASS);\n    this.panels_ = this.element_.querySelectorAll('.' + this.CssClasses_.PANEL_CLASS);\n    // Create new tabs for each tab element\n    for (var i = 0; i < this.tabs_.length; i++) {\n        new MaterialTab(this.tabs_[i], this);\n    }\n    this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);\n};\n/**\n   * Reset tab state, dropping active classes\n   *\n   * @private\n   */\nMaterialTabs.prototype.resetTabState_ = function () {\n    for (var k = 0; k < this.tabs_.length; k++) {\n        this.tabs_[k].classList.remove(this.CssClasses_.ACTIVE_CLASS);\n    }\n};\n/**\n   * Reset panel state, droping active classes\n   *\n   * @private\n   */\nMaterialTabs.prototype.resetPanelState_ = function () {\n    for (var j = 0; j < this.panels_.length; j++) {\n        this.panels_[j].classList.remove(this.CssClasses_.ACTIVE_CLASS);\n    }\n};\n/**\n   * Initialize element.\n   */\nMaterialTabs.prototype.init = function () {\n    if (this.element_) {\n        this.initTabs_();\n    }\n};\nfunction MaterialTab(tab, ctx) {\n    if (tab) {\n        if (ctx.element_.classList.contains(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_RIPPLE_CONTAINER);\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT);\n            var ripple = document.createElement('span');\n            ripple.classList.add(ctx.CssClasses_.MDL_RIPPLE);\n            rippleContainer.appendChild(ripple);\n            tab.appendChild(rippleContainer);\n        }\n        tab.addEventListener('click', function (e) {\n            e.preventDefault();\n            var href = tab.href.split('#')[1];\n            var panel = ctx.element_.querySelector('#' + href);\n            ctx.resetTabState_();\n            ctx.resetPanelState_();\n            tab.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\n            panel.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\n        });\n    }\n}\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTabs,\n    classAsString: 'MaterialTabs',\n    cssClass: 'mdl-js-tabs'\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Layout MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialLayout = function MaterialLayout(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialLayout = MaterialLayout;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialLayout.prototype.Constant_ = {\n    MAX_WIDTH: '(max-width: 1024px)',\n    TAB_SCROLL_PIXELS: 100,\n    MENU_ICON: 'menu',\n    CHEVRON_LEFT: 'chevron_left',\n    CHEVRON_RIGHT: 'chevron_right'\n};\n/**\n   * Modes.\n   *\n   * @enum {Number}\n   * @private\n   */\nMaterialLayout.prototype.Mode_ = {\n    STANDARD: 0,\n    SEAMED: 1,\n    WATERFALL: 2,\n    SCROLL: 3\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialLayout.prototype.CssClasses_ = {\n    INNER_CONTAINER: 'mdl-layout__inner-container',\n    HEADER: 'mdl-layout__header',\n    DRAWER: 'mdl-layout__drawer',\n    CONTENT: 'mdl-layout__content',\n    DRAWER_BTN: 'mdl-layout__drawer-button',\n    ICON: 'material-icons',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_CONTAINER: 'mdl-layout__tab-ripple-container',\n    RIPPLE: 'mdl-ripple',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    HEADER_SEAMED: 'mdl-layout__header--seamed',\n    HEADER_WATERFALL: 'mdl-layout__header--waterfall',\n    HEADER_SCROLL: 'mdl-layout__header--scroll',\n    FIXED_HEADER: 'mdl-layout--fixed-header',\n    OBFUSCATOR: 'mdl-layout__obfuscator',\n    TAB_BAR: 'mdl-layout__tab-bar',\n    TAB_CONTAINER: 'mdl-layout__tab-bar-container',\n    TAB: 'mdl-layout__tab',\n    TAB_BAR_BUTTON: 'mdl-layout__tab-bar-button',\n    TAB_BAR_LEFT_BUTTON: 'mdl-layout__tab-bar-left-button',\n    TAB_BAR_RIGHT_BUTTON: 'mdl-layout__tab-bar-right-button',\n    PANEL: 'mdl-layout__tab-panel',\n    HAS_DRAWER: 'has-drawer',\n    HAS_TABS: 'has-tabs',\n    HAS_SCROLLING_HEADER: 'has-scrolling-header',\n    CASTING_SHADOW: 'is-casting-shadow',\n    IS_COMPACT: 'is-compact',\n    IS_SMALL_SCREEN: 'is-small-screen',\n    IS_DRAWER_OPEN: 'is-visible',\n    IS_ACTIVE: 'is-active',\n    IS_UPGRADED: 'is-upgraded',\n    IS_ANIMATING: 'is-animating',\n    ON_LARGE_SCREEN: 'mdl-layout--large-screen-only',\n    ON_SMALL_SCREEN: 'mdl-layout--small-screen-only'\n};\n/**\n   * Handles scrolling on the content.\n   *\n   * @private\n   */\nMaterialLayout.prototype.contentScrollHandler_ = function () {\n    if (this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)) {\n        return;\n    }\n    if (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\n        this.header_.classList.add(this.CssClasses_.IS_COMPACT);\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n    } else if (this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n    }\n};\n/**\n   * Handles changes in screen size.\n   *\n   * @private\n   */\nMaterialLayout.prototype.screenSizeHandler_ = function () {\n    if (this.screenSizeMediaQuery_.matches) {\n        this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN);\n        // Collapse drawer (if any) when moving to a large screen size.\n        if (this.drawer_) {\n            this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);\n        }\n    }\n};\n/**\n   * Handles toggling of the drawer.\n   *\n   * @private\n   */\nMaterialLayout.prototype.drawerToggleHandler_ = function () {\n    this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);\n};\n/**\n   * Handles (un)setting the `is-animating` class\n   *\n   * @private\n   */\nMaterialLayout.prototype.headerTransitionEndHandler_ = function () {\n    this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);\n};\n/**\n   * Handles expanding the header on click\n   *\n   * @private\n   */\nMaterialLayout.prototype.headerClickHandler_ = function () {\n    if (this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n    }\n};\n/**\n   * Reset tab state, dropping active classes\n   *\n   * @private\n   */\nMaterialLayout.prototype.resetTabState_ = function (tabBar) {\n    for (var k = 0; k < tabBar.length; k++) {\n        tabBar[k].classList.remove(this.CssClasses_.IS_ACTIVE);\n    }\n};\n/**\n   * Reset panel state, droping active classes\n   *\n   * @private\n   */\nMaterialLayout.prototype.resetPanelState_ = function (panels) {\n    for (var j = 0; j < panels.length; j++) {\n        panels[j].classList.remove(this.CssClasses_.IS_ACTIVE);\n    }\n};\n/**\n   * Initialize element.\n   */\nMaterialLayout.prototype.init = function () {\n    if (this.element_) {\n        var directChildren = this.element_.childNodes;\n        for (var c = 0; c < directChildren.length; c++) {\n            var child = directChildren[c];\n            if (child.classList && child.classList.contains(this.CssClasses_.HEADER)) {\n                this.header_ = child;\n            }\n            if (child.classList && child.classList.contains(this.CssClasses_.DRAWER)) {\n                this.drawer_ = child;\n            }\n            if (child.classList && child.classList.contains(this.CssClasses_.CONTENT)) {\n                this.content_ = child;\n            }\n        }\n        if (this.header_) {\n            this.tabBar_ = this.header_.querySelector('.' + this.CssClasses_.TAB_BAR);\n        }\n        var mode = this.Mode_.STANDARD;\n        // Keep an eye on screen size, and add/remove auxiliary class for styling\n        // of small screens.\n        this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH);\n        this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this));\n        this.screenSizeHandler_();\n        if (this.header_) {\n            if (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)) {\n                mode = this.Mode_.SEAMED;\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)) {\n                mode = this.Mode_.WATERFALL;\n                this.header_.addEventListener('transitionend', this.headerTransitionEndHandler_.bind(this));\n                this.header_.addEventListener('click', this.headerClickHandler_.bind(this));\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)) {\n                mode = this.Mode_.SCROLL;\n                this.element_.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER);\n            }\n            if (mode === this.Mode_.STANDARD) {\n                this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\n                if (this.tabBar_) {\n                    this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW);\n                }\n            } else if (mode === this.Mode_.SEAMED || mode === this.Mode_.SCROLL) {\n                this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n                if (this.tabBar_) {\n                    this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n                }\n            } else if (mode === this.Mode_.WATERFALL) {\n                // Add and remove shadows depending on scroll position.\n                // Also add/remove auxiliary class for styling of the compact version of\n                // the header.\n                this.content_.addEventListener('scroll', this.contentScrollHandler_.bind(this));\n                this.contentScrollHandler_();\n            }\n        }\n        // Add drawer toggling button to our layout, if we have an openable drawer.\n        if (this.drawer_) {\n            var drawerButton = document.createElement('div');\n            drawerButton.classList.add(this.CssClasses_.DRAWER_BTN);\n            if (this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)) {\n                //If drawer has ON_LARGE_SCREEN class then add it to the drawer toggle button as well.\n                drawerButton.classList.add(this.CssClasses_.ON_LARGE_SCREEN);\n            } else if (this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)) {\n                //If drawer has ON_SMALL_SCREEN class then add it to the drawer toggle button as well.\n                drawerButton.classList.add(this.CssClasses_.ON_SMALL_SCREEN);\n            }\n            var drawerButtonIcon = document.createElement('i');\n            drawerButtonIcon.classList.add(this.CssClasses_.ICON);\n            drawerButtonIcon.textContent = this.Constant_.MENU_ICON;\n            drawerButton.appendChild(drawerButtonIcon);\n            drawerButton.addEventListener('click', this.drawerToggleHandler_.bind(this));\n            // Add a class if the layout has a drawer, for altering the left padding.\n            // Adds the HAS_DRAWER to the elements since this.header_ may or may\n            // not be present.\n            this.element_.classList.add(this.CssClasses_.HAS_DRAWER);\n            // If we have a fixed header, add the button to the header rather than\n            // the layout.\n            if (this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)) {\n                this.header_.insertBefore(drawerButton, this.header_.firstChild);\n            } else {\n                this.element_.insertBefore(drawerButton, this.content_);\n            }\n            var obfuscator = document.createElement('div');\n            obfuscator.classList.add(this.CssClasses_.OBFUSCATOR);\n            this.element_.appendChild(obfuscator);\n            obfuscator.addEventListener('click', this.drawerToggleHandler_.bind(this));\n        }\n        // Initialize tabs, if any.\n        if (this.header_ && this.tabBar_) {\n            this.element_.classList.add(this.CssClasses_.HAS_TABS);\n            var tabContainer = document.createElement('div');\n            tabContainer.classList.add(this.CssClasses_.TAB_CONTAINER);\n            this.header_.insertBefore(tabContainer, this.tabBar_);\n            this.header_.removeChild(this.tabBar_);\n            var leftButton = document.createElement('div');\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);\n            var leftButtonIcon = document.createElement('i');\n            leftButtonIcon.classList.add(this.CssClasses_.ICON);\n            leftButtonIcon.textContent = this.Constant_.CHEVRON_LEFT;\n            leftButton.appendChild(leftButtonIcon);\n            leftButton.addEventListener('click', function () {\n                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;\n            }.bind(this));\n            var rightButton = document.createElement('div');\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);\n            var rightButtonIcon = document.createElement('i');\n            rightButtonIcon.classList.add(this.CssClasses_.ICON);\n            rightButtonIcon.textContent = this.Constant_.CHEVRON_RIGHT;\n            rightButton.appendChild(rightButtonIcon);\n            rightButton.addEventListener('click', function () {\n                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;\n            }.bind(this));\n            tabContainer.appendChild(leftButton);\n            tabContainer.appendChild(this.tabBar_);\n            tabContainer.appendChild(rightButton);\n            // Add and remove buttons depending on scroll position.\n            var tabScrollHandler = function () {\n                if (this.tabBar_.scrollLeft > 0) {\n                    leftButton.classList.add(this.CssClasses_.IS_ACTIVE);\n                } else {\n                    leftButton.classList.remove(this.CssClasses_.IS_ACTIVE);\n                }\n                if (this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth) {\n                    rightButton.classList.add(this.CssClasses_.IS_ACTIVE);\n                } else {\n                    rightButton.classList.remove(this.CssClasses_.IS_ACTIVE);\n                }\n            }.bind(this);\n            this.tabBar_.addEventListener('scroll', tabScrollHandler);\n            tabScrollHandler();\n            if (this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n                this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            }\n            // Select element tabs, document panels\n            var tabs = this.tabBar_.querySelectorAll('.' + this.CssClasses_.TAB);\n            var panels = this.content_.querySelectorAll('.' + this.CssClasses_.PANEL);\n            // Create new tabs for each tab element\n            for (var i = 0; i < tabs.length; i++) {\n                new MaterialLayoutTab(tabs[i], tabs, panels, this);\n            }\n        }\n        var innerContainer = document.createElement('div');\n        innerContainer.classList.add(this.CssClasses_.INNER_CONTAINER);\n        while (this.element_.firstChild) {\n            innerContainer.appendChild(this.element_.firstChild);\n        }\n        this.element_.appendChild(innerContainer);\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\nfunction MaterialLayoutTab(tab, tabs, panels, layout) {\n    if (tab) {\n        if (layout.tabBar_.classList.contains(layout.CssClasses_.JS_RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(layout.CssClasses_.RIPPLE_CONTAINER);\n            rippleContainer.classList.add(layout.CssClasses_.JS_RIPPLE_EFFECT);\n            var ripple = document.createElement('span');\n            ripple.classList.add(layout.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(ripple);\n            tab.appendChild(rippleContainer);\n        }\n        tab.addEventListener('click', function (e) {\n            e.preventDefault();\n            var href = tab.href.split('#')[1];\n            var panel = layout.content_.querySelector('#' + href);\n            layout.resetTabState_(tabs);\n            layout.resetPanelState_(panels);\n            tab.classList.add(layout.CssClasses_.IS_ACTIVE);\n            panel.classList.add(layout.CssClasses_.IS_ACTIVE);\n        });\n    }\n}\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialLayout,\n    classAsString: 'MaterialLayout',\n    cssClass: 'mdl-js-layout'\n});","// Source: https://github.com/darius/requestAnimationFrame/blob/master/requestAnimationFrame.js\n// Adapted from https://gist.github.com/paulirish/1579671 which derived from\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n// requestAnimationFrame polyfill by Erik Möller.\n// Fixes from Paul Irish, Tino Zijdel, Andrew Mao, Klemen Slavič, Darius Bacon\n// MIT license\nif (!Date.now) {\n    Date.now = function () {\n        return new Date().getTime();\n    };\n}\nvar vendors = [\n    'webkit',\n    'moz'\n];\nfor (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\n    var vp = vendors[i];\n    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];\n}\nif (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\n    var lastTime = 0;\n    window.requestAnimationFrame = function (callback) {\n        var now = Date.now();\n        var nextTime = Math.max(lastTime + 16, now);\n        return setTimeout(function () {\n            callback(lastTime = nextTime);\n        }, nextTime - now);\n    };\n    window.cancelAnimationFrame = clearTimeout;\n}","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Button MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialButton = function MaterialButton(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialButton = MaterialButton;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialButton.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialButton.prototype.CssClasses_ = {\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_CONTAINER: 'mdl-button__ripple-container',\n    RIPPLE: 'mdl-ripple'\n};\n/**\n   * Handle blur of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialButton.prototype.blurHandler_ = function (event) {\n    if (event) {\n        this.element_.blur();\n    }\n};\n// Public methods.\n/**\n   * Disable button.\n   *\n   * @public\n   */\nMaterialButton.prototype.disable = function () {\n    this.element_.disabled = true;\n};\n/**\n   * Enable button.\n   *\n   * @public\n   */\nMaterialButton.prototype.enable = function () {\n    this.element_.disabled = false;\n};\n/**\n   * Initialize element.\n   */\nMaterialButton.prototype.init = function () {\n    if (this.element_) {\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleElement_ = document.createElement('span');\n            this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(this.rippleElement_);\n            this.boundRippleBlurHandler = this.blurHandler_.bind(this);\n            this.rippleElement_.addEventListener('mouseup', this.boundRippleBlurHandler);\n            this.element_.appendChild(rippleContainer);\n        }\n        this.boundButtonBlurHandler = this.blurHandler_.bind(this);\n        this.element_.addEventListener('mouseup', this.boundButtonBlurHandler);\n        this.element_.addEventListener('mouseleave', this.boundButtonBlurHandler);\n    }\n};\n/**\n   * Downgrade the element.\n   *\n   * @private\n   */\nMaterialButton.prototype.mdlDowngrade_ = function () {\n    if (this.rippleElement_) {\n        this.rippleElement_.removeEventListener('mouseup', this.boundRippleBlurHandler);\n    }\n    this.element_.removeEventListener('mouseup', this.boundButtonBlurHandler);\n    this.element_.removeEventListener('mouseleave', this.boundButtonBlurHandler);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialButton,\n    classAsString: 'MaterialButton',\n    cssClass: 'mdl-js-button',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialCheckbox = function MaterialCheckbox(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialCheckbox = MaterialCheckbox;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialCheckbox.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialCheckbox.prototype.CssClasses_ = {\n    INPUT: 'mdl-checkbox__input',\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.onChange_ = function (event) {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.onMouseUp_ = function (event) {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.blur_ = function (event) {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\n/**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Disable checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Check checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\n/**\n   * Uncheck checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialCheckbox.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        var boxOutline = document.createElement('span');\n        boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);\n        var tickContainer = document.createElement('span');\n        tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);\n        var tickOutline = document.createElement('span');\n        tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);\n        boxOutline.appendChild(tickOutline);\n        this.element_.appendChild(tickContainer);\n        this.element_.appendChild(boxOutline);\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundInputOnChange = this.onChange_.bind(this);\n        this.boundInputOnFocus = this.onFocus_.bind(this);\n        this.boundInputOnBlur = this.onBlur_.bind(this);\n        this.boundElementMouseUp = this.onMouseUp_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n        this.element_.addEventListener('mouseup', this.boundElementMouseUp);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Downgrade the component.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.mdlDowngrade_ = function () {\n    if (this.rippleContainerElement_) {\n        this.rippleContainerElement_.removeEventListener('mouseup', this.boundRippleMouseUp);\n    }\n    this.inputElement_.removeEventListener('change', this.boundInputOnChange);\n    this.inputElement_.removeEventListener('focus', this.boundInputOnFocus);\n    this.inputElement_.removeEventListener('blur', this.boundInputOnBlur);\n    this.element_.removeEventListener('mouseup', this.boundElementMouseUp);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialCheckbox,\n    classAsString: 'MaterialCheckbox',\n    cssClass: 'mdl-js-checkbox',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for icon toggle MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialIconToggle = function MaterialIconToggle(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialIconToggle = MaterialIconToggle;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialIconToggle.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialIconToggle.prototype.CssClasses_ = {\n    INPUT: 'mdl-icon-toggle__input',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n};\n/**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.onChange_ = function (event) {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.onMouseUp_ = function (event) {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.blur_ = function (event) {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\n/**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Disable icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Check icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\n/**\n   * Uncheck icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialIconToggle.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundInputOnChange = this.onChange_.bind(this);\n        this.boundInputOnFocus = this.onFocus_.bind(this);\n        this.boundInputOnBlur = this.onBlur_.bind(this);\n        this.boundElementOnMouseUp = this.onMouseUp_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n        this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);\n        this.updateClasses_();\n        this.element_.classList.add('is-upgraded');\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.mdlDowngrade_ = function () {\n    if (this.rippleContainerElement_) {\n        this.rippleContainerElement_.removeEventListener('mouseup', this.boundRippleMouseUp);\n    }\n    this.inputElement_.removeEventListener('change', this.boundInputOnChange);\n    this.inputElement_.removeEventListener('focus', this.boundInputOnFocus);\n    this.inputElement_.removeEventListener('blur', this.boundInputOnBlur);\n    this.element_.removeEventListener('mouseup', this.boundElementOnMouseUp);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialIconToggle,\n    classAsString: 'MaterialIconToggle',\n    cssClass: 'mdl-js-icon-toggle',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for dropdown MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialMenu = function MaterialMenu(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialMenu = MaterialMenu;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialMenu.prototype.Constant_ = {\n    // Total duration of the menu animation.\n    TRANSITION_DURATION_SECONDS: 0.3,\n    // The fraction of the total duration we want to use for menu item animations.\n    TRANSITION_DURATION_FRACTION: 0.8,\n    // How long the menu stays open after choosing an option (so the user can see\n    // the ripple).\n    CLOSE_TIMEOUT: 150\n};\n/**\n   * Keycodes, for code readability.\n   *\n   * @enum {Number}\n   * @private\n   */\nMaterialMenu.prototype.Keycodes_ = {\n    ENTER: 13,\n    ESCAPE: 27,\n    SPACE: 32,\n    UP_ARROW: 38,\n    DOWN_ARROW: 40\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialMenu.prototype.CssClasses_ = {\n    CONTAINER: 'mdl-menu__container',\n    OUTLINE: 'mdl-menu__outline',\n    ITEM: 'mdl-menu__item',\n    ITEM_RIPPLE_CONTAINER: 'mdl-menu__item-ripple-container',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    // Statuses\n    IS_UPGRADED: 'is-upgraded',\n    IS_VISIBLE: 'is-visible',\n    IS_ANIMATING: 'is-animating',\n    // Alignment options\n    BOTTOM_LEFT: 'mdl-menu--bottom-left',\n    // This is the default.\n    BOTTOM_RIGHT: 'mdl-menu--bottom-right',\n    TOP_LEFT: 'mdl-menu--top-left',\n    TOP_RIGHT: 'mdl-menu--top-right',\n    UNALIGNED: 'mdl-menu--unaligned'\n};\n/**\n   * Initialize element.\n   */\nMaterialMenu.prototype.init = function () {\n    if (this.element_) {\n        // Create container for the menu.\n        var container = document.createElement('div');\n        container.classList.add(this.CssClasses_.CONTAINER);\n        this.element_.parentElement.insertBefore(container, this.element_);\n        this.element_.parentElement.removeChild(this.element_);\n        container.appendChild(this.element_);\n        this.container_ = container;\n        // Create outline for the menu (shadow and background).\n        var outline = document.createElement('div');\n        outline.classList.add(this.CssClasses_.OUTLINE);\n        this.outline_ = outline;\n        container.insertBefore(outline, this.element_);\n        // Find the \"for\" element and bind events to it.\n        var forElId = this.element_.getAttribute('for');\n        var forEl = null;\n        if (forElId) {\n            forEl = document.getElementById(forElId);\n            if (forEl) {\n                this.forElement_ = forEl;\n                forEl.addEventListener('click', this.handleForClick_.bind(this));\n                forEl.addEventListener('keydown', this.handleForKeyboardEvent_.bind(this));\n            }\n        }\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        this.boundItemKeydown = this.handleItemKeyboardEvent_.bind(this);\n        this.boundItemClick = this.handleItemClick_.bind(this);\n        for (var i = 0; i < items.length; i++) {\n            // Add a listener to each menu item.\n            items[i].addEventListener('click', this.boundItemClick);\n            // Add a tab index to each menu item.\n            items[i].tabIndex = '-1';\n            // Add a keyboard listener to each menu item.\n            items[i].addEventListener('keydown', this.boundItemKeydown);\n        }\n        // Add ripple classes to each item, if the user has enabled ripples.\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            for (i = 0; i < items.length; i++) {\n                var item = items[i];\n                var rippleContainer = document.createElement('span');\n                rippleContainer.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);\n                var ripple = document.createElement('span');\n                ripple.classList.add(this.CssClasses_.RIPPLE);\n                rippleContainer.appendChild(ripple);\n                item.appendChild(rippleContainer);\n                item.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            }\n        }\n        // Copy alignment classes to the container, so the outline can use them.\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)) {\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n            this.outline_.classList.add(this.CssClasses_.TOP_LEFT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n            this.outline_.classList.add(this.CssClasses_.UNALIGNED);\n        }\n        container.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Handles a click on the \"for\" element, by positioning the menu and then\n   * toggling it.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleForClick_ = function (evt) {\n    if (this.element_ && this.forElement_) {\n        var rect = this.forElement_.getBoundingClientRect();\n        var forRect = this.forElement_.parentElement.getBoundingClientRect();\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n        } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n            // Position below the \"for\" element, aligned to its right.\n            this.container_.style.right = forRect.right - rect.right + 'px';\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n            // Position above the \"for\" element, aligned to its left.\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n            // Position above the \"for\" element, aligned to its right.\n            this.container_.style.right = forRect.right - rect.right + 'px';\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\n        } else {\n            // Default: position below the \"for\" element, aligned to its left.\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\n        }\n    }\n    this.toggle(evt);\n};\n/**\n   * Handles a keyboard event on the \"for\" element.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleForKeyboardEvent_ = function (evt) {\n    if (this.element_ && this.container_ && this.forElement_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\n                evt.preventDefault();\n                items[items.length - 1].focus();\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\n                evt.preventDefault();\n                items[0].focus();\n            }\n        }\n    }\n};\n/**\n   * Handles a keyboard event on an item.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleItemKeyboardEvent_ = function (evt) {\n    if (this.element_ && this.container_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            var currentIndex = Array.prototype.slice.call(items).indexOf(evt.target);\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\n                evt.preventDefault();\n                if (currentIndex > 0) {\n                    items[currentIndex - 1].focus();\n                } else {\n                    items[items.length - 1].focus();\n                }\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\n                evt.preventDefault();\n                if (items.length > currentIndex + 1) {\n                    items[currentIndex + 1].focus();\n                } else {\n                    items[0].focus();\n                }\n            } else if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {\n                evt.preventDefault();\n                // Send mousedown and mouseup to trigger ripple.\n                var e = new MouseEvent('mousedown');\n                evt.target.dispatchEvent(e);\n                e = new MouseEvent('mouseup');\n                evt.target.dispatchEvent(e);\n                // Send click.\n                evt.target.click();\n            } else if (evt.keyCode === this.Keycodes_.ESCAPE) {\n                evt.preventDefault();\n                this.hide();\n            }\n        }\n    }\n};\n/**\n   * Handles a click event on an item.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleItemClick_ = function (evt) {\n    if (evt.target.getAttribute('disabled') !== null) {\n        evt.stopPropagation();\n    } else {\n        // Wait some time before closing menu, so the user can see the ripple.\n        this.closing_ = true;\n        window.setTimeout(function (evt) {\n            this.hide();\n            this.closing_ = false;\n        }.bind(this), this.Constant_.CLOSE_TIMEOUT);\n    }\n};\n/**\n   * Calculates the initial clip (for opening the menu) or final clip (for closing\n   * it), and applies it. This allows us to animate from or to the correct point,\n   * that is, the point it's aligned to in the \"for\" element.\n   *\n   * @param {Number} height Height of the clip rectangle\n   * @param {Number} width Width of the clip rectangle\n   * @private\n   */\nMaterialMenu.prototype.applyClip_ = function (height, width) {\n    if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n        // Do not clip.\n        this.element_.style.clip = null;\n    } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n        // Clip to the top right corner of the menu.\n        this.element_.style.clip = 'rect(0 ' + width + 'px ' + '0 ' + width + 'px)';\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n        // Clip to the bottom left corner of the menu.\n        this.element_.style.clip = 'rect(' + height + 'px 0 ' + height + 'px 0)';\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n        // Clip to the bottom right corner of the menu.\n        this.element_.style.clip = 'rect(' + height + 'px ' + width + 'px ' + height + 'px ' + width + 'px)';\n    } else {\n        // Default: do not clip (same as clipping to the top left corner).\n        this.element_.style.clip = null;\n    }\n};\n/**\n   * Adds an event listener to clean up after the animation ends.\n   *\n   * @private\n   */\nMaterialMenu.prototype.addAnimationEndListener_ = function () {\n    var cleanup = function () {\n        this.element_.removeEventListener('transitionend', cleanup);\n        this.element_.removeEventListener('webkitTransitionEnd', cleanup);\n        this.element_.classList.remove(this.CssClasses_.IS_ANIMATING);\n    }.bind(this);\n    // Remove animation class once the transition is done.\n    this.element_.addEventListener('transitionend', cleanup);\n    this.element_.addEventListener('webkitTransitionEnd', cleanup);\n};\n/**\n   * Displays the menu.\n   *\n   * @public\n   */\nMaterialMenu.prototype.show = function (evt) {\n    if (this.element_ && this.container_ && this.outline_) {\n        // Measure the inner element.\n        var height = this.element_.getBoundingClientRect().height;\n        var width = this.element_.getBoundingClientRect().width;\n        // Apply the inner element's size to the container and outline.\n        this.container_.style.width = width + 'px';\n        this.container_.style.height = height + 'px';\n        this.outline_.style.width = width + 'px';\n        this.outline_.style.height = height + 'px';\n        var transitionDuration = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION;\n        // Calculate transition delays for individual menu items, so that they fade\n        // in one at a time.\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        for (var i = 0; i < items.length; i++) {\n            var itemDelay = null;\n            if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n                itemDelay = (height - items[i].offsetTop - items[i].offsetHeight) / height * transitionDuration + 's';\n            } else {\n                itemDelay = items[i].offsetTop / height * transitionDuration + 's';\n            }\n            items[i].style.transitionDelay = itemDelay;\n        }\n        // Apply the initial clip to the text before we start animating.\n        this.applyClip_(height, width);\n        // Wait for the next frame, turn on animation, and apply the final clip.\n        // Also make it visible. This triggers the transitions.\n        window.requestAnimationFrame(function () {\n            this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\n            this.element_.style.clip = 'rect(0 ' + width + 'px ' + height + 'px 0)';\n            this.container_.classList.add(this.CssClasses_.IS_VISIBLE);\n        }.bind(this));\n        // Clean up after the animation is complete.\n        this.addAnimationEndListener_();\n        // Add a click listener to the document, to close the menu.\n        var callback = function (e) {\n            // Check to see if the document is processing the same event that\n            // displayed the menu in the first place. If so, do nothing.\n            // Also check to see if the menu is in the process of closing itself, and\n            // do nothing in that case.\n            if (e !== evt && !this.closing_) {\n                document.removeEventListener('click', callback);\n                this.hide();\n            }\n        }.bind(this);\n        document.addEventListener('click', callback);\n    }\n};\n/**\n   * Hides the menu.\n   *\n   * @public\n   */\nMaterialMenu.prototype.hide = function () {\n    if (this.element_ && this.container_ && this.outline_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        // Remove all transition delays; menu items fade out concurrently.\n        for (var i = 0; i < items.length; i++) {\n            items[i].style.transitionDelay = null;\n        }\n        // Measure the inner element.\n        var height = this.element_.getBoundingClientRect().height;\n        var width = this.element_.getBoundingClientRect().width;\n        // Turn on animation, and apply the final clip. Also make invisible.\n        // This triggers the transitions.\n        this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\n        this.applyClip_(height, width);\n        this.container_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        // Clean up after the animation is complete.\n        this.addAnimationEndListener_();\n    }\n};\n/**\n   * Displays or hides the menu, depending on current state.\n   *\n   * @public\n   */\nMaterialMenu.prototype.toggle = function (evt) {\n    if (this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        this.hide();\n    } else {\n        this.show(evt);\n    }\n};\n/**\n   * Downgrade the component.\n   *\n   * @private\n   */\nMaterialMenu.prototype.mdlDowngrade_ = function () {\n    var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n    for (var i = 0; i < items.length; i++) {\n        items[i].removeEventListener('click', this.boundItemClick);\n        items[i].removeEventListener('keydown', this.boundItemKeydown);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialMenu,\n    classAsString: 'MaterialMenu',\n    cssClass: 'mdl-js-menu',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialProgress = MaterialProgress;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialProgress.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: 'mdl-progress__indeterminate' };\n/**\n   * Set the current progress of the progressbar.\n   *\n   * @param {Number} p Percentage of the progress (0-100)\n   * @public\n   */\nMaterialProgress.prototype.setProgress = function (p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n        return;\n    }\n    this.progressbar_.style.width = p + '%';\n};\n/**\n   * Set the current progress of the buffer.\n   *\n   * @param {Number} p Percentage of the buffer (0-100)\n   * @public\n   */\nMaterialProgress.prototype.setBuffer = function (p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = 100 - p + '%';\n};\n/**\n   * Initialize element.\n   */\nMaterialProgress.prototype.init = function () {\n    if (this.element_) {\n        var el = document.createElement('div');\n        el.className = 'progressbar bar bar1';\n        this.element_.appendChild(el);\n        this.progressbar_ = el;\n        el = document.createElement('div');\n        el.className = 'bufferbar bar bar2';\n        this.element_.appendChild(el);\n        this.bufferbar_ = el;\n        el = document.createElement('div');\n        el.className = 'auxbar bar bar3';\n        this.element_.appendChild(el);\n        this.auxbar_ = el;\n        this.progressbar_.style.width = '0%';\n        this.bufferbar_.style.width = '100%';\n        this.auxbar_.style.width = '0%';\n        this.element_.classList.add('is-upgraded');\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialProgress.prototype.mdlDowngrade_ = function () {\n    while (this.element_.firstChild) {\n        this.element_.removeChild(this.element_.firstChild);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Radio MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialRadio = function MaterialRadio(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialRadio = MaterialRadio;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialRadio.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialRadio.prototype.CssClasses_ = {\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded',\n    JS_RADIO: 'mdl-js-radio',\n    RADIO_BTN: 'mdl-radio__button',\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple'\n};\n/**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.onChange_ = function (event) {\n    // Since other radio buttons don't get change events, we need to look for\n    // them to update their classes.\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);\n    for (var i = 0; i < radios.length; i++) {\n        var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);\n        // Different name == different group, so no point updating those.\n        if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {\n            radios[i].MaterialRadio.updateClasses_();\n        }\n    }\n};\n/**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.onMouseup_ = function (event) {\n    this.blur_();\n};\n/**\n   * Update classes.\n   *\n   * @private\n   */\nMaterialRadio.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.blur_ = function (event) {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.btnElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the components disabled state.\n   *\n   * @public\n   */\nMaterialRadio.prototype.checkDisabled = function () {\n    if (this.btnElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Check the components toggled state.\n   *\n   * @public\n   */\nMaterialRadio.prototype.checkToggleState = function () {\n    if (this.btnElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\n/**\n   * Disable radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.disable = function () {\n    this.btnElement_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.enable = function () {\n    this.btnElement_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Check radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.check = function () {\n    this.btnElement_.checked = true;\n    this.updateClasses_();\n};\n/**\n   * Uncheck radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.uncheck = function () {\n    this.btnElement_.checked = false;\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialRadio.prototype.init = function () {\n    if (this.element_) {\n        this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);\n        var outerCircle = document.createElement('span');\n        outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);\n        var innerCircle = document.createElement('span');\n        innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);\n        this.element_.appendChild(outerCircle);\n        this.element_.appendChild(innerCircle);\n        var rippleContainer;\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            rippleContainer.addEventListener('mouseup', this.onMouseup_.bind(this));\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(ripple);\n            this.element_.appendChild(rippleContainer);\n        }\n        this.btnElement_.addEventListener('change', this.onChange_.bind(this));\n        this.btnElement_.addEventListener('focus', this.onFocus_.bind(this));\n        this.btnElement_.addEventListener('blur', this.onBlur_.bind(this));\n        this.element_.addEventListener('mouseup', this.onMouseup_.bind(this));\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialRadio,\n    classAsString: 'MaterialRadio',\n    cssClass: 'mdl-js-radio',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Slider MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSlider = function MaterialSlider(element) {\n    this.element_ = element;\n    // Browser feature detection.\n    this.isIE_ = window.navigator.msPointerEnabled;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialSlider = MaterialSlider;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialSlider.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialSlider.prototype.CssClasses_ = {\n    IE_CONTAINER: 'mdl-slider__ie-container',\n    SLIDER_CONTAINER: 'mdl-slider__container',\n    BACKGROUND_FLEX: 'mdl-slider__background-flex',\n    BACKGROUND_LOWER: 'mdl-slider__background-lower',\n    BACKGROUND_UPPER: 'mdl-slider__background-upper',\n    IS_LOWEST_VALUE: 'is-lowest-value',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle input on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onInput_ = function (event) {\n    this.updateValueStyles_();\n};\n/**\n   * Handle change on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onChange_ = function (event) {\n    this.updateValueStyles_();\n};\n/**\n   * Handle mouseup on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onMouseUp_ = function (event) {\n    event.target.blur();\n};\n/**\n   * Handle mousedown on container element.\n   * This handler is purpose is to not require the use to click\n   * exactly on the 2px slider element, as FireFox seems to be very\n   * strict about this.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onContainerMouseDown_ = function (event) {\n    // If this click is not on the parent element (but rather some child)\n    // ignore. It may still bubble up.\n    if (event.target !== this.element_.parentElement) {\n        return;\n    }\n    // Discard the original event and create a new event that\n    // is on the slider element.\n    event.preventDefault();\n    var newEvent = new MouseEvent('mousedown', {\n        target: event.target,\n        buttons: event.buttons,\n        clientX: event.clientX,\n        clientY: this.element_.getBoundingClientRect().y\n    });\n    this.element_.dispatchEvent(newEvent);\n};\n/**\n   * Handle updating of values.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.updateValueStyles_ = function (event) {\n    // Calculate and apply percentages to div structure behind slider.\n    var fraction = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min);\n    if (fraction === 0) {\n        this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE);\n    }\n    if (!this.isIE_) {\n        this.backgroundLower_.style.flex = fraction;\n        this.backgroundLower_.style.webkitFlex = fraction;\n        this.backgroundUpper_.style.flex = 1 - fraction;\n        this.backgroundUpper_.style.webkitFlex = 1 - fraction;\n    }\n};\n// Public methods.\n/**\n   * Disable slider.\n   *\n   * @public\n   */\nMaterialSlider.prototype.disable = function () {\n    this.element_.disabled = true;\n};\n/**\n   * Enable slider.\n   *\n   * @public\n   */\nMaterialSlider.prototype.enable = function () {\n    this.element_.disabled = false;\n};\n/**\n   * Update slider value.\n   *\n   * @param {Number} value The value to which to set the control (optional).\n   * @public\n   */\nMaterialSlider.prototype.change = function (value) {\n    if (typeof value !== 'undefined') {\n        this.element_.value = value;\n    }\n    this.updateValueStyles_();\n};\n/**\n   * Initialize element.\n   */\nMaterialSlider.prototype.init = function () {\n    if (this.element_) {\n        if (this.isIE_) {\n            // Since we need to specify a very large height in IE due to\n            // implementation limitations, we add a parent here that trims it down to\n            // a reasonable size.\n            var containerIE = document.createElement('div');\n            containerIE.classList.add(this.CssClasses_.IE_CONTAINER);\n            this.element_.parentElement.insertBefore(containerIE, this.element_);\n            this.element_.parentElement.removeChild(this.element_);\n            containerIE.appendChild(this.element_);\n        } else {\n            // For non-IE browsers, we need a div structure that sits behind the\n            // slider and allows us to style the left and right sides of it with\n            // different colors.\n            var container = document.createElement('div');\n            container.classList.add(this.CssClasses_.SLIDER_CONTAINER);\n            this.element_.parentElement.insertBefore(container, this.element_);\n            this.element_.parentElement.removeChild(this.element_);\n            container.appendChild(this.element_);\n            var backgroundFlex = document.createElement('div');\n            backgroundFlex.classList.add(this.CssClasses_.BACKGROUND_FLEX);\n            container.appendChild(backgroundFlex);\n            this.backgroundLower_ = document.createElement('div');\n            this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER);\n            backgroundFlex.appendChild(this.backgroundLower_);\n            this.backgroundUpper_ = document.createElement('div');\n            this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER);\n            backgroundFlex.appendChild(this.backgroundUpper_);\n        }\n        this.boundInputHandler = this.onInput_.bind(this);\n        this.boundChangeHandler = this.onChange_.bind(this);\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\n        this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this);\n        this.element_.addEventListener('input', this.boundInputHandler);\n        this.element_.addEventListener('change', this.boundChangeHandler);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\n        this.element_.parentElement.addEventListener('mousedown', this.boundContainerMouseDownHandler);\n        this.updateValueStyles_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialSlider.prototype.mdlDowngrade_ = function () {\n    this.element_.removeEventListener('input', this.boundInputHandler);\n    this.element_.removeEventListener('change', this.boundChangeHandler);\n    this.element_.removeEventListener('mouseup', this.boundMouseUpHandler);\n    this.element_.parentElement.removeEventListener('mousedown', this.boundContainerMouseDownHandler);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSlider,\n    classAsString: 'MaterialSlider',\n    cssClass: 'mdl-js-slider',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Spinner MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   * @constructor\n   */\nvar MaterialSpinner = function MaterialSpinner(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialSpinner = MaterialSpinner;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialSpinner.prototype.CssClasses_ = {\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\n};\n/**\n   * Auxiliary method to create a spinner layer.\n   *\n   * @param {Number} index Index of the layer to be created.\n   * @public\n   */\nMaterialSpinner.prototype.createLayer = function (index) {\n    var layer = document.createElement('div');\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\n    var leftClipper = document.createElement('div');\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\n    var gapPatch = document.createElement('div');\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\n    var rightClipper = document.createElement('div');\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\n    var circleOwners = [\n        leftClipper,\n        gapPatch,\n        rightClipper\n    ];\n    for (var i = 0; i < circleOwners.length; i++) {\n        var circle = document.createElement('div');\n        circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\n        circleOwners[i].appendChild(circle);\n    }\n    layer.appendChild(leftClipper);\n    layer.appendChild(gapPatch);\n    layer.appendChild(rightClipper);\n    this.element_.appendChild(layer);\n};\n/**\n   * Stops the spinner animation.\n   * Public method for users who need to stop the spinner for any reason.\n   *\n   * @public\n   */\nMaterialSpinner.prototype.stop = function () {\n    this.element_.classList.remove('is-active');\n};\n/**\n   * Starts the spinner animation.\n   * Public method for users who need to manually start the spinner for any reason\n   * (instead of just adding the 'is-active' class to their markup).\n   *\n   * @public\n   */\nMaterialSpinner.prototype.start = function () {\n    this.element_.classList.add('is-active');\n};\n/**\n   * Initialize element.\n   */\nMaterialSpinner.prototype.init = function () {\n    if (this.element_) {\n        for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\n            this.createLayer(i);\n        }\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSpinner,\n    classAsString: 'MaterialSpinner',\n    cssClass: 'mdl-js-spinner',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSwitch = function MaterialSwitch(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialSwitch = MaterialSwitch;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialSwitch.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialSwitch.prototype.CssClasses_ = {\n    INPUT: 'mdl-switch__input',\n    TRACK: 'mdl-switch__track',\n    THUMB: 'mdl-switch__thumb',\n    FOCUS_HELPER: 'mdl-switch__focus-helper',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-switch__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n};\n/**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSwitch.prototype.onChange_ = function (event) {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSwitch.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSwitch.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSwitch.prototype.onMouseUp_ = function (event) {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.blur_ = function (event) {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the components disabled state.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Check the components toggled state.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\n/**\n   * Disable switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Activate switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.on = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\n/**\n   * Deactivate switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.off = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialSwitch.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        var track = document.createElement('div');\n        track.classList.add(this.CssClasses_.TRACK);\n        var thumb = document.createElement('div');\n        thumb.classList.add(this.CssClasses_.THUMB);\n        var focusHelper = document.createElement('span');\n        focusHelper.classList.add(this.CssClasses_.FOCUS_HELPER);\n        thumb.appendChild(focusHelper);\n        this.element_.appendChild(track);\n        this.element_.appendChild(thumb);\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundMouseUpHandler);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundChangeHandler = this.onChange_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundChangeHandler);\n        this.inputElement_.addEventListener('focus', this.boundFocusHandler);\n        this.inputElement_.addEventListener('blur', this.boundBlurHandler);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\n        this.updateClasses_();\n        this.element_.classList.add('is-upgraded');\n    }\n};\n/**\n   * Downgrade the component.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.mdlDowngrade_ = function () {\n    if (this.rippleContainerElement_) {\n        this.rippleContainerElement_.removeEventListener('mouseup', this.boundMouseUpHandler);\n    }\n    this.inputElement_.removeEventListener('change', this.boundChangeHandler);\n    this.inputElement_.removeEventListener('focus', this.boundFocusHandler);\n    this.inputElement_.removeEventListener('blur', this.boundBlurHandler);\n    this.element_.removeEventListener('mouseup', this.boundMouseUpHandler);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSwitch,\n    classAsString: 'MaterialSwitch',\n    cssClass: 'mdl-js-switch',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Textfield MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTextfield = function MaterialTextfield(element) {\n    this.element_ = element;\n    this.maxRows = this.Constant_.NO_MAX_ROWS;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialTextfield = MaterialTextfield;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialTextfield.prototype.Constant_ = {\n    NO_MAX_ROWS: -1,\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialTextfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-textfield__label',\n    INPUT: 'mdl-textfield__input',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle input being entered.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTextfield.prototype.onKeyDown_ = function (event) {\n    var currentRowCount = event.target.value.split('\\n').length;\n    if (event.keyCode === 13) {\n        if (currentRowCount >= this.maxRows) {\n            event.preventDefault();\n        }\n    }\n};\n/**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTextfield.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTextfield.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n};\n// Public methods.\n/**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkDisabled = function () {\n    if (this.input_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkValidity = function () {\n    if (this.input_.validity.valid) {\n        this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n    } else {\n        this.element_.classList.add(this.CssClasses_.IS_INVALID);\n    }\n};\n/**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkDirty = function () {\n    if (this.input_.value && this.input_.value.length > 0) {\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n};\n/**\n   * Disable text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.disable = function () {\n    this.input_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.enable = function () {\n    this.input_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Update text field value.\n   *\n   * @param {String} value The value to which to set the control (optional).\n   * @public\n   */\nMaterialTextfield.prototype.change = function (value) {\n    if (value) {\n        this.input_.value = value;\n    }\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialTextfield.prototype.init = function () {\n    if (this.element_) {\n        this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.input_) {\n            if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {\n                this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);\n                if (isNaN(this.maxRows)) {\n                    this.maxRows = this.Constant_.NO_MAX_ROWS;\n                }\n            }\n            this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n            this.boundFocusHandler = this.onFocus_.bind(this);\n            this.boundBlurHandler = this.onBlur_.bind(this);\n            this.input_.addEventListener('input', this.boundUpdateClassesHandler);\n            this.input_.addEventListener('focus', this.boundFocusHandler);\n            this.input_.addEventListener('blur', this.boundBlurHandler);\n            if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n                // TODO: This should handle pasting multi line text.\n                // Currently doesn't.\n                this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n                this.input_.addEventListener('keydown', this.boundKeyDownHandler);\n            }\n            this.updateClasses_();\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n        }\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialTextfield.prototype.mdlDowngrade_ = function () {\n    this.input_.removeEventListener('input', this.boundUpdateClassesHandler);\n    this.input_.removeEventListener('focus', this.boundFocusHandler);\n    this.input_.removeEventListener('blur', this.boundBlurHandler);\n    if (this.boundKeyDownHandler) {\n        this.input_.removeEventListener('keydown', this.boundKeyDownHandler);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTextfield,\n    classAsString: 'MaterialTextfield',\n    cssClass: 'mdl-js-textfield',\n    widget: true\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Tooltip MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTooltip = function MaterialTooltip(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialTooltip = MaterialTooltip;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialTooltip.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialTooltip.prototype.CssClasses_ = { IS_ACTIVE: 'is-active' };\n/**\n   * Handle mouseenter for tooltip.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTooltip.prototype.handleMouseEnter_ = function (event) {\n    event.stopPropagation();\n    var props = event.target.getBoundingClientRect();\n    var left = props.left + props.width / 2;\n    var marginLeft = -1 * (this.element_.offsetWidth / 2);\n    if (left + marginLeft < 0) {\n        this.element_.style.left = 0;\n        this.element_.style.marginLeft = 0;\n    } else {\n        this.element_.style.left = left + 'px';\n        this.element_.style.marginLeft = marginLeft + 'px';\n    }\n    this.element_.style.top = props.top + props.height + 10 + 'px';\n    this.element_.classList.add(this.CssClasses_.IS_ACTIVE);\n    window.addEventListener('scroll', this.boundMouseLeaveHandler, false);\n    window.addEventListener('touchmove', this.boundMouseLeaveHandler, false);\n};\n/**\n   * Handle mouseleave for tooltip.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTooltip.prototype.handleMouseLeave_ = function (event) {\n    event.stopPropagation();\n    this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);\n    window.removeEventListener('scroll', this.boundMouseLeaveHandler);\n    window.removeEventListener('touchmove', this.boundMouseLeaveHandler, false);\n};\n/**\n   * Initialize element.\n   */\nMaterialTooltip.prototype.init = function () {\n    if (this.element_) {\n        var forElId = this.element_.getAttribute('for');\n        if (forElId) {\n            this.forElement_ = document.getElementById(forElId);\n        }\n        if (this.forElement_) {\n            // Tabindex needs to be set for `blur` events to be emitted\n            if (!this.forElement_.getAttribute('tabindex')) {\n                this.forElement_.setAttribute('tabindex', '0');\n            }\n            this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this);\n            this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this);\n            this.forElement_.addEventListener('mouseenter', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('click', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('blur', this.boundMouseLeaveHandler);\n            this.forElement_.addEventListener('touchstart', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('mouseleave', this.boundMouseLeaveHandler);\n        }\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialTooltip.prototype.mdlDowngrade_ = function () {\n    if (this.forElement_) {\n        this.forElement_.removeEventListener('mouseenter', this.boundMouseEnterHandler, false);\n        this.forElement_.removeEventListener('click', this.boundMouseEnterHandler, false);\n        this.forElement_.removeEventListener('touchstart', this.boundMouseEnterHandler, false);\n        this.forElement_.removeEventListener('mouseleave', this.boundMouseLeaveHandler);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTooltip,\n    classAsString: 'MaterialTooltip',\n    cssClass: 'mdl-tooltip'\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Data Table Card MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialDataTable = function MaterialDataTable(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialDataTable = MaterialDataTable;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialDataTable.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialDataTable.prototype.CssClasses_ = {\n    DATA_TABLE: 'mdl-data-table',\n    SELECTABLE: 'mdl-data-table--selectable',\n    IS_SELECTED: 'is-selected',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Generates and returns a function that toggles the selection state of a\n   * single row (or multiple rows).\n   *\n   * @param {HTMLElement} checkbox Checkbox that toggles the selection state.\n   * @param {HTMLElement} row Row to toggle when checkbox changes.\n   * @param {HTMLElement[]} rows Rows to toggle when checkbox changes.\n   * @private\n   */\nMaterialDataTable.prototype.selectRow_ = function (checkbox, row, rows) {\n    if (row) {\n        return function () {\n            if (checkbox.checked) {\n                row.classList.add(this.CssClasses_.IS_SELECTED);\n            } else {\n                row.classList.remove(this.CssClasses_.IS_SELECTED);\n            }\n        }.bind(this);\n    }\n    if (rows) {\n        return function () {\n            var i;\n            var el;\n            if (checkbox.checked) {\n                for (i = 0; i < rows.length; i++) {\n                    el = rows[i].querySelector('td').querySelector('.mdl-checkbox');\n                    el.MaterialCheckbox.check();\n                    rows[i].classList.add(this.CssClasses_.IS_SELECTED);\n                }\n            } else {\n                for (i = 0; i < rows.length; i++) {\n                    el = rows[i].querySelector('td').querySelector('.mdl-checkbox');\n                    el.MaterialCheckbox.uncheck();\n                    rows[i].classList.remove(this.CssClasses_.IS_SELECTED);\n                }\n            }\n        }.bind(this);\n    }\n};\n/**\n   * Creates a checkbox for a single or or multiple rows and hooks up the\n   * event handling.\n   *\n   * @param {HTMLElement} row Row to toggle when checkbox changes.\n   * @param {HTMLElement[]} rows Rows to toggle when checkbox changes.\n   * @private\n   */\nMaterialDataTable.prototype.createCheckbox_ = function (row, rows) {\n    var label = document.createElement('label');\n    label.classList.add('mdl-checkbox');\n    label.classList.add('mdl-js-checkbox');\n    label.classList.add('mdl-js-ripple-effect');\n    label.classList.add('mdl-data-table__select');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.classList.add('mdl-checkbox__input');\n    if (row) {\n        checkbox.addEventListener('change', this.selectRow_(checkbox, row));\n    } else if (rows) {\n        checkbox.addEventListener('change', this.selectRow_(checkbox, null, rows));\n    }\n    label.appendChild(checkbox);\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\n    return label;\n};\n/**\n   * Initialize element.\n   */\nMaterialDataTable.prototype.init = function () {\n    if (this.element_) {\n        var firstHeader = this.element_.querySelector('th');\n        var rows = this.element_.querySelector('tbody').querySelectorAll('tr');\n        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\n            var th = document.createElement('th');\n            var headerCheckbox = this.createCheckbox_(null, rows);\n            th.appendChild(headerCheckbox);\n            firstHeader.parentElement.insertBefore(th, firstHeader);\n            for (var i = 0; i < rows.length; i++) {\n                var firstCell = rows[i].querySelector('td');\n                if (firstCell) {\n                    var td = document.createElement('td');\n                    var rowCheckbox = this.createCheckbox_(rows[i]);\n                    td.appendChild(rowCheckbox);\n                    rows[i].insertBefore(td, firstCell);\n                }\n            }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialDataTable,\n    classAsString: 'MaterialDataTable',\n    cssClass: 'mdl-js-data-table'\n});","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Ripple MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialRipple = function MaterialRipple(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialRipple = MaterialRipple;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialRipple.prototype.Constant_ = {\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',\n    INITIAL_SIZE: '1px',\n    INITIAL_OPACITY: '0.4',\n    FINAL_OPACITY: '0',\n    FINAL_SCALE: ''\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialRipple.prototype.CssClasses_ = {\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    IS_ANIMATING: 'is-animating',\n    IS_VISIBLE: 'is-visible'\n};\n/**\n   * Handle mouse / finger down on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRipple.prototype.downHandler_ = function (event) {\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {\n        var rect = this.element_.getBoundingClientRect();\n        this.boundHeight = rect.height;\n        this.boundWidth = rect.width;\n        this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;\n        this.rippleElement_.style.width = this.rippleSize_ + 'px';\n        this.rippleElement_.style.height = this.rippleSize_ + 'px';\n    }\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {\n        this.ignoringMouseDown_ = false;\n    } else {\n        if (event.type === 'touchstart') {\n            this.ignoringMouseDown_ = true;\n        }\n        var frameCount = this.getFrameCount();\n        if (frameCount > 0) {\n            return;\n        }\n        this.setFrameCount(1);\n        var bound = event.currentTarget.getBoundingClientRect();\n        var x;\n        var y;\n        // Check if we are handling a keyboard click.\n        if (event.clientX === 0 && event.clientY === 0) {\n            x = Math.round(bound.width / 2);\n            y = Math.round(bound.height / 2);\n        } else {\n            var clientX = event.clientX ? event.clientX : event.touches[0].clientX;\n            var clientY = event.clientY ? event.clientY : event.touches[0].clientY;\n            x = Math.round(clientX - bound.left);\n            y = Math.round(clientY - bound.top);\n        }\n        this.setRippleXY(x, y);\n        this.setRippleStyles(true);\n        window.requestAnimationFrame(this.animFrameHandler.bind(this));\n    }\n};\n/**\n   * Handle mouse / finger up on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRipple.prototype.upHandler_ = function (event) {\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.\n    if (event && event.detail !== 2) {\n        this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n    }\n    // Allow a repaint to occur before removing this class, so the animation\n    // shows for tap events, which seem to trigger a mouseup too soon after\n    // mousedown.\n    window.setTimeout(function () {\n        this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n    }.bind(this), 0);\n};\n/**\n   * Initialize element.\n   */\nMaterialRipple.prototype.init = function () {\n    if (this.element_) {\n        var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);\n        if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {\n            this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);\n            this.frameCount_ = 0;\n            this.rippleSize_ = 0;\n            this.x_ = 0;\n            this.y_ = 0;\n            // Touch start produces a compat mouse down event, which would cause a\n            // second ripples. To avoid that, we use this property to ignore the first\n            // mouse down after a touch start.\n            this.ignoringMouseDown_ = false;\n            this.boundDownHandler = this.downHandler_.bind(this);\n            this.element_.addEventListener('mousedown', this.boundDownHandler);\n            this.element_.addEventListener('touchstart', this.boundDownHandler);\n            this.boundUpHandler = this.upHandler_.bind(this);\n            this.element_.addEventListener('mouseup', this.boundUpHandler);\n            this.element_.addEventListener('mouseleave', this.boundUpHandler);\n            this.element_.addEventListener('touchend', this.boundUpHandler);\n            this.element_.addEventListener('blur', this.boundUpHandler);\n            this.getFrameCount = function () {\n                return this.frameCount_;\n            };\n            this.setFrameCount = function (fC) {\n                this.frameCount_ = fC;\n            };\n            this.getRippleElement = function () {\n                return this.rippleElement_;\n            };\n            this.setRippleXY = function (newX, newY) {\n                this.x_ = newX;\n                this.y_ = newY;\n            };\n            this.setRippleStyles = function (start) {\n                if (this.rippleElement_ !== null) {\n                    var transformString;\n                    var scale;\n                    var size;\n                    var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';\n                    if (start) {\n                        scale = this.Constant_.INITIAL_SCALE;\n                        size = this.Constant_.INITIAL_SIZE;\n                    } else {\n                        scale = this.Constant_.FINAL_SCALE;\n                        size = this.rippleSize_ + 'px';\n                        if (recentering) {\n                            offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';\n                        }\n                    }\n                    transformString = 'translate(-50%, -50%) ' + offset + scale;\n                    this.rippleElement_.style.webkitTransform = transformString;\n                    this.rippleElement_.style.msTransform = transformString;\n                    this.rippleElement_.style.transform = transformString;\n                    if (start) {\n                        this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);\n                    } else {\n                        this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);\n                    }\n                }\n            };\n            this.animFrameHandler = function () {\n                if (this.frameCount_-- > 0) {\n                    window.requestAnimationFrame(this.animFrameHandler.bind(this));\n                } else {\n                    this.setRippleStyles(false);\n                }\n            };\n        }\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialRipple.prototype.mdlDowngrade_ = function () {\n    this.element_.removeEventListener('mousedown', this.boundDownHandler);\n    this.element_.removeEventListener('touchstart', this.boundDownHandler);\n    this.element_.removeEventListener('mouseup', this.boundUpHandler);\n    this.element_.removeEventListener('mouseleave', this.boundUpHandler);\n    this.element_.removeEventListener('touchend', this.boundUpHandler);\n    this.element_.removeEventListener('blur', this.boundUpHandler);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialRipple,\n    classAsString: 'MaterialRipple',\n    cssClass: 'mdl-js-ripple-effect',\n    widget: false\n});",";(function() {\n\"use strict\";\n\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A component handler interface using the revealing module design pattern.\n * More details on this design pattern here:\n * https://github.com/jasonmayes/mdl-component-design-pattern\n *\n * @author Jason Mayes.\n */\n/* exported componentHandler */\nwindow.componentHandler = (function() {\n  'use strict';\n\n  /** @type {!Array<componentHandler.ComponentConfig>} */\n  var registeredComponents_ = [];\n\n  /** @type {!Array<componentHandler.Component>} */\n  var createdComponents_ = [];\n\n  var downgradeMethod_ = 'mdlDowngrade_';\n  var componentConfigProperty_ = 'mdlComponentConfigInternal_';\n\n  /**\n   * Searches registered components for a class we are interested in using.\n   * Optionally replaces a match with passed object if specified.\n   *\n   * @param {String} name The name of a class we want to use.\n   * @param {componentHandler.ComponentConfig=} optReplace Optional object to replace match with.\n   * @return {!Object|Boolean}\n   * @private\n   */\n  function findRegisteredClass_(name, optReplace) {\n    for (var i = 0; i < registeredComponents_.length; i++) {\n      if (registeredComponents_[i].className === name) {\n        if (optReplace !== undefined) {\n          registeredComponents_[i] = optReplace;\n        }\n        return registeredComponents_[i];\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Returns an array of the classNames of the upgraded classes on the element.\n   *\n   * @param {!HTMLElement} element The element to fetch data from.\n   * @return {!Array<String>}\n   * @private\n   */\n  function getUpgradedListOfElement_(element) {\n    var dataUpgraded = element.getAttribute('data-upgraded');\n    // Use `['']` as default value to conform the `,name,name...` style.\n    return dataUpgraded === null ? [''] : dataUpgraded.split(',');\n  }\n\n  /**\n   * Returns true if the given element has already been upgraded for the given\n   * class.\n   *\n   * @param {!HTMLElement} element The element we want to check.\n   * @param {String} jsClass The class to check for.\n   * @returns {Boolean}\n   * @private\n   */\n  function isElementUpgraded_(element, jsClass) {\n    var upgradedList = getUpgradedListOfElement_(element);\n    return upgradedList.indexOf(jsClass) !== -1;\n  }\n\n  /**\n   * Searches existing DOM for elements of our component type and upgrades them\n   * if they have not already been upgraded.\n   *\n   * @param {String=} optJsClass the programatic name of the element class we\n   * need to create a new instance of.\n   * @param {String=} optCssClass the name of the CSS class elements of this\n   * type will have.\n   */\n  function upgradeDomInternal(optJsClass, optCssClass) {\n    if (optJsClass === undefined && optCssClass === undefined) {\n      for (var i = 0; i < registeredComponents_.length; i++) {\n        upgradeDomInternal(registeredComponents_[i].className,\n            registeredComponents_[i].cssClass);\n      }\n    } else {\n      var jsClass = /** @type {String} */ (optJsClass);\n      if (optCssClass === undefined) {\n        var registeredClass = findRegisteredClass_(jsClass);\n        if (registeredClass) {\n          optCssClass = registeredClass.cssClass;\n        }\n      }\n\n      var elements = document.querySelectorAll('.' + optCssClass);\n      for (var n = 0; n < elements.length; n++) {\n        upgradeElementInternal(elements[n], jsClass);\n      }\n    }\n  }\n\n  /**\n   * Upgrades a specific element rather than all in the DOM.\n   *\n   * @param {!HTMLElement} element The element we wish to upgrade.\n   * @param {String=} optJsClass Optional name of the class we want to upgrade\n   * the element to.\n   */\n  function upgradeElementInternal(element, optJsClass) {\n    // Verify argument type.\n    if (!(typeof element === 'object' && element instanceof Element)) {\n      throw new Error('Invalid argument provided to upgrade MDL element.');\n    }\n    var upgradedList = getUpgradedListOfElement_(element);\n    var classesToUpgrade = [];\n    // If jsClass is not provided scan the registered components to find the\n    // ones matching the element's CSS classList.\n    if (!optJsClass) {\n      var classList = element.classList;\n      registeredComponents_.forEach(function(component) {\n        // Match CSS & Not to be upgraded & Not upgraded.\n        if (classList.contains(component.cssClass) &&\n            classesToUpgrade.indexOf(component) === -1 &&\n            !isElementUpgraded_(element, component.className)) {\n          classesToUpgrade.push(component);\n        }\n      });\n    } else if (!isElementUpgraded_(element, optJsClass)) {\n      classesToUpgrade.push(findRegisteredClass_(optJsClass));\n    }\n\n    // Upgrade the element for each classes.\n    for (var i = 0, n = classesToUpgrade.length, registeredClass; i < n; i++) {\n      registeredClass = classesToUpgrade[i];\n      if (registeredClass) {\n        // Mark element as upgraded.\n        upgradedList.push(registeredClass.className);\n        element.setAttribute('data-upgraded', upgradedList.join(','));\n        var instance = new registeredClass.classConstructor(element);\n        instance[componentConfigProperty_] = registeredClass;\n        createdComponents_.push(instance);\n        // Call any callbacks the user has registered with this component type.\n        for (var j = 0, m = registeredClass.callbacks.length; j < m; j++) {\n          registeredClass.callbacks[j](element);\n        }\n\n        if (registeredClass.widget) {\n          // Assign per element instance for control over API\n          element[registeredClass.className] = instance;\n        }\n      } else {\n        throw new Error(\n          'Unable to find a registered component for the given class.');\n      }\n\n      var ev = document.createEvent('Events');\n      ev.initEvent('mdl-componentupgraded', true, true);\n      element.dispatchEvent(ev);\n    }\n  }\n\n  /**\n   * Upgrades a specific list of elements rather than all in the DOM.\n   *\n   * @param {!HTMLElement|!Array<!HTMLElement>|!NodeList|!HTMLCollection} elements\n   * The elements we wish to upgrade.\n   */\n  function upgradeElementsInternal(elements) {\n    if (!Array.isArray(elements)) {\n      if (typeof elements.item === 'function') {\n        elements = Array.prototype.slice.call(/** @type {Array} */ (elements));\n      } else {\n        elements = [elements];\n      }\n    }\n    for (var i = 0, n = elements.length, element; i < n; i++) {\n      element = elements[i];\n      if (element instanceof HTMLElement) {\n        if (element.children.length > 0) {\n          upgradeElementsInternal(element.children);\n        }\n        upgradeElementInternal(element);\n      }\n    }\n  }\n\n  /**\n   * Registers a class for future use and attempts to upgrade existing DOM.\n   *\n   * @param {{constructor: !Function, classAsString: String, cssClass: String, widget: String}} config\n   */\n  function registerInternal(config) {\n    var newConfig = /** @type {componentHandler.ComponentConfig} */ ({\n      'classConstructor': config.constructor,\n      'className': config.classAsString,\n      'cssClass': config.cssClass,\n      'widget': config.widget === undefined ? true : config.widget,\n      'callbacks': []\n    });\n\n    registeredComponents_.forEach(function(item) {\n      if (item.cssClass === newConfig.cssClass) {\n        throw new Error('The provided cssClass has already been registered.');\n      }\n      if (item.className === newConfig.className) {\n        throw new Error('The provided className has already been registered');\n      }\n    });\n\n    if (config.constructor.prototype\n        .hasOwnProperty(componentConfigProperty_)) {\n      throw new Error(\n          'MDL component classes must not have ' + componentConfigProperty_ +\n          ' defined as a property.');\n    }\n\n    var found = findRegisteredClass_(config.classAsString, newConfig);\n\n    if (!found) {\n      registeredComponents_.push(newConfig);\n    }\n  }\n\n  /**\n   * Allows user to be alerted to any upgrades that are performed for a given\n   * component type\n   *\n   * @param {String} jsClass The class name of the MDL component we wish\n   * to hook into for any upgrades performed.\n   * @param {function(!HTMLElement)} callback The function to call upon an\n   * upgrade. This function should expect 1 parameter - the HTMLElement which\n   * got upgraded.\n   */\n  function registerUpgradedCallbackInternal(jsClass, callback) {\n    var regClass = findRegisteredClass_(jsClass);\n    if (regClass) {\n      regClass.callbacks.push(callback);\n    }\n  }\n\n  /**\n   * Upgrades all registered components found in the current DOM. This is\n   * automatically called on window load.\n   */\n  function upgradeAllRegisteredInternal() {\n    for (var n = 0; n < registeredComponents_.length; n++) {\n      upgradeDomInternal(registeredComponents_[n].className);\n    }\n  }\n\n  /**\n   * Finds a created component by a given DOM node.\n   *\n   * @param {!Node} node\n   * @return {*}\n   */\n  function findCreatedComponentByNodeInternal(node) {\n    for (var n = 0; n < createdComponents_.length; n++) {\n      var component = createdComponents_[n];\n      if (component.element_ === node) {\n        return component;\n      }\n    }\n  }\n\n  /**\n   * Check the component for the downgrade method.\n   * Execute if found.\n   * Remove component from createdComponents list.\n   *\n   * @param {*} component\n   */\n  function deconstructComponentInternal(component) {\n    if (component &&\n        component[componentConfigProperty_]\n          .classConstructor.prototype\n          .hasOwnProperty(downgradeMethod_)) {\n      component[downgradeMethod_]();\n      var componentIndex = createdComponents_.indexOf(component);\n      createdComponents_.splice(componentIndex, 1);\n\n      var upgrades = component.element_.getAttribute('data-upgraded').split(',');\n      var componentPlace = upgrades.indexOf(\n          component[componentConfigProperty_].classAsString);\n      upgrades.splice(componentPlace, 1);\n      component.element_.setAttribute('data-upgraded', upgrades.join(','));\n\n      var ev = document.createEvent('Events');\n      ev.initEvent('mdl-componentdowngraded', true, true);\n      component.element_.dispatchEvent(ev);\n    }\n  }\n\n  /**\n   * Downgrade either a given node, an array of nodes, or a NodeList.\n   *\n   * @param {!Node|!Array<!Node>|!NodeList} nodes\n   */\n  function downgradeNodesInternal(nodes) {\n    var downgradeNode = function(node) {\n      deconstructComponentInternal(findCreatedComponentByNodeInternal(node));\n    };\n    if (nodes instanceof Array || nodes instanceof NodeList) {\n      for (var n = 0; n < nodes.length; n++) {\n        downgradeNode(nodes[n]);\n      }\n    } else if (nodes instanceof Node) {\n      downgradeNode(nodes);\n    } else {\n      throw new Error('Invalid argument provided to downgrade MDL nodes.');\n    }\n  }\n\n  // Now return the functions that should be made public with their publicly\n  // facing names...\n  return {\n    upgradeDom: upgradeDomInternal,\n    upgradeElement: upgradeElementInternal,\n    upgradeElements: upgradeElementsInternal,\n    upgradeAllRegistered: upgradeAllRegisteredInternal,\n    registerUpgradedCallback: registerUpgradedCallbackInternal,\n    register: registerInternal,\n    downgradeElements: downgradeNodesInternal\n  };\n})();\n\nwindow.addEventListener('load', function() {\n  'use strict';\n\n  /**\n   * Performs a \"Cutting the mustard\" test. If the browser supports the features\n   * tested, adds a mdl-js class to the <html> element. It then upgrades all MDL\n   * components requiring JavaScript.\n   */\n  if ('classList' in document.createElement('div') &&\n      'querySelector' in document &&\n      'addEventListener' in window && Array.prototype.forEach) {\n    document.documentElement.classList.add('mdl-js');\n    componentHandler.upgradeAllRegistered();\n  } else {\n    componentHandler.upgradeElement =\n        componentHandler.register = function() {};\n  }\n});\n\n/**\n * Describes the type of a registered component type managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   constructor: !Function,\n *   className: String,\n *   cssClass: String,\n *   widget: String,\n *   callbacks: !Array<function(!HTMLElement)>\n * }}\n */\ncomponentHandler.ComponentConfig;  // jshint ignore:line\n\n/**\n * Created component (i.e., upgraded element) type as managed by\n * componentHandler. Provided for benefit of the Closure compiler.\n *\n * @typedef {{\n *   element_: !HTMLElement,\n *   className: String,\n *   classAsString: String,\n *   cssClass: String,\n *   widget: String\n * }}\n */\ncomponentHandler.Component;  // jshint ignore:line\n\n// Source: https://github.com/darius/requestAnimationFrame/blob/master/requestAnimationFrame.js\n// Adapted from https://gist.github.com/paulirish/1579671 which derived from\n// http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n// requestAnimationFrame polyfill by Erik Möller.\n// Fixes from Paul Irish, Tino Zijdel, Andrew Mao, Klemen Slavič, Darius Bacon\n// MIT license\nif (!Date.now) {\n    Date.now = function () {\n        return new Date().getTime();\n    };\n}\nvar vendors = [\n    'webkit',\n    'moz'\n];\nfor (var i = 0; i < vendors.length && !window.requestAnimationFrame; ++i) {\n    var vp = vendors[i];\n    window.requestAnimationFrame = window[vp + 'RequestAnimationFrame'];\n    window.cancelAnimationFrame = window[vp + 'CancelAnimationFrame'] || window[vp + 'CancelRequestAnimationFrame'];\n}\nif (/iP(ad|hone|od).*OS 6/.test(window.navigator.userAgent) || !window.requestAnimationFrame || !window.cancelAnimationFrame) {\n    var lastTime = 0;\n    window.requestAnimationFrame = function (callback) {\n        var now = Date.now();\n        var nextTime = Math.max(lastTime + 16, now);\n        return setTimeout(function () {\n            callback(lastTime = nextTime);\n        }, nextTime - now);\n    };\n    window.cancelAnimationFrame = clearTimeout;\n}\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Button MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialButton = function MaterialButton(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialButton = MaterialButton;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialButton.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialButton.prototype.CssClasses_ = {\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_CONTAINER: 'mdl-button__ripple-container',\n    RIPPLE: 'mdl-ripple'\n};\n/**\n   * Handle blur of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialButton.prototype.blurHandler_ = function (event) {\n    if (event) {\n        this.element_.blur();\n    }\n};\n// Public methods.\n/**\n   * Disable button.\n   *\n   * @public\n   */\nMaterialButton.prototype.disable = function () {\n    this.element_.disabled = true;\n};\n/**\n   * Enable button.\n   *\n   * @public\n   */\nMaterialButton.prototype.enable = function () {\n    this.element_.disabled = false;\n};\n/**\n   * Initialize element.\n   */\nMaterialButton.prototype.init = function () {\n    if (this.element_) {\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleElement_ = document.createElement('span');\n            this.rippleElement_.classList.add(this.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(this.rippleElement_);\n            this.boundRippleBlurHandler = this.blurHandler_.bind(this);\n            this.rippleElement_.addEventListener('mouseup', this.boundRippleBlurHandler);\n            this.element_.appendChild(rippleContainer);\n        }\n        this.boundButtonBlurHandler = this.blurHandler_.bind(this);\n        this.element_.addEventListener('mouseup', this.boundButtonBlurHandler);\n        this.element_.addEventListener('mouseleave', this.boundButtonBlurHandler);\n    }\n};\n/**\n   * Downgrade the element.\n   *\n   * @private\n   */\nMaterialButton.prototype.mdlDowngrade_ = function () {\n    if (this.rippleElement_) {\n        this.rippleElement_.removeEventListener('mouseup', this.boundRippleBlurHandler);\n    }\n    this.element_.removeEventListener('mouseup', this.boundButtonBlurHandler);\n    this.element_.removeEventListener('mouseleave', this.boundButtonBlurHandler);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialButton,\n    classAsString: 'MaterialButton',\n    cssClass: 'mdl-js-button',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialCheckbox = function MaterialCheckbox(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialCheckbox = MaterialCheckbox;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialCheckbox.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialCheckbox.prototype.CssClasses_ = {\n    INPUT: 'mdl-checkbox__input',\n    BOX_OUTLINE: 'mdl-checkbox__box-outline',\n    FOCUS_HELPER: 'mdl-checkbox__focus-helper',\n    TICK_OUTLINE: 'mdl-checkbox__tick-outline',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-checkbox__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.onChange_ = function (event) {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.onMouseUp_ = function (event) {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialCheckbox.prototype.blur_ = function (event) {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\n/**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Disable checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Check checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\n/**\n   * Uncheck checkbox.\n   *\n   * @public\n   */\nMaterialCheckbox.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialCheckbox.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        var boxOutline = document.createElement('span');\n        boxOutline.classList.add(this.CssClasses_.BOX_OUTLINE);\n        var tickContainer = document.createElement('span');\n        tickContainer.classList.add(this.CssClasses_.FOCUS_HELPER);\n        var tickOutline = document.createElement('span');\n        tickOutline.classList.add(this.CssClasses_.TICK_OUTLINE);\n        boxOutline.appendChild(tickOutline);\n        this.element_.appendChild(tickContainer);\n        this.element_.appendChild(boxOutline);\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundInputOnChange = this.onChange_.bind(this);\n        this.boundInputOnFocus = this.onFocus_.bind(this);\n        this.boundInputOnBlur = this.onBlur_.bind(this);\n        this.boundElementMouseUp = this.onMouseUp_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n        this.element_.addEventListener('mouseup', this.boundElementMouseUp);\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Downgrade the component.\n   *\n   * @private\n   */\nMaterialCheckbox.prototype.mdlDowngrade_ = function () {\n    if (this.rippleContainerElement_) {\n        this.rippleContainerElement_.removeEventListener('mouseup', this.boundRippleMouseUp);\n    }\n    this.inputElement_.removeEventListener('change', this.boundInputOnChange);\n    this.inputElement_.removeEventListener('focus', this.boundInputOnFocus);\n    this.inputElement_.removeEventListener('blur', this.boundInputOnBlur);\n    this.element_.removeEventListener('mouseup', this.boundElementMouseUp);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialCheckbox,\n    classAsString: 'MaterialCheckbox',\n    cssClass: 'mdl-js-checkbox',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for icon toggle MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialIconToggle = function MaterialIconToggle(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialIconToggle = MaterialIconToggle;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialIconToggle.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialIconToggle.prototype.CssClasses_ = {\n    INPUT: 'mdl-icon-toggle__input',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-icon-toggle__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n};\n/**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.onChange_ = function (event) {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.onMouseUp_ = function (event) {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialIconToggle.prototype.blur_ = function (event) {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the inputs toggle state and update display.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\n/**\n   * Check the inputs disabled state and update display.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Disable icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Check icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.check = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\n/**\n   * Uncheck icon toggle.\n   *\n   * @public\n   */\nMaterialIconToggle.prototype.uncheck = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialIconToggle.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.element_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.JS_RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.boundRippleMouseUp = this.onMouseUp_.bind(this);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundRippleMouseUp);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundInputOnChange = this.onChange_.bind(this);\n        this.boundInputOnFocus = this.onFocus_.bind(this);\n        this.boundInputOnBlur = this.onBlur_.bind(this);\n        this.boundElementOnMouseUp = this.onMouseUp_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundInputOnChange);\n        this.inputElement_.addEventListener('focus', this.boundInputOnFocus);\n        this.inputElement_.addEventListener('blur', this.boundInputOnBlur);\n        this.element_.addEventListener('mouseup', this.boundElementOnMouseUp);\n        this.updateClasses_();\n        this.element_.classList.add('is-upgraded');\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialIconToggle.prototype.mdlDowngrade_ = function () {\n    if (this.rippleContainerElement_) {\n        this.rippleContainerElement_.removeEventListener('mouseup', this.boundRippleMouseUp);\n    }\n    this.inputElement_.removeEventListener('change', this.boundInputOnChange);\n    this.inputElement_.removeEventListener('focus', this.boundInputOnFocus);\n    this.inputElement_.removeEventListener('blur', this.boundInputOnBlur);\n    this.element_.removeEventListener('mouseup', this.boundElementOnMouseUp);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialIconToggle,\n    classAsString: 'MaterialIconToggle',\n    cssClass: 'mdl-js-icon-toggle',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for dropdown MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialMenu = function MaterialMenu(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialMenu = MaterialMenu;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialMenu.prototype.Constant_ = {\n    // Total duration of the menu animation.\n    TRANSITION_DURATION_SECONDS: 0.3,\n    // The fraction of the total duration we want to use for menu item animations.\n    TRANSITION_DURATION_FRACTION: 0.8,\n    // How long the menu stays open after choosing an option (so the user can see\n    // the ripple).\n    CLOSE_TIMEOUT: 150\n};\n/**\n   * Keycodes, for code readability.\n   *\n   * @enum {Number}\n   * @private\n   */\nMaterialMenu.prototype.Keycodes_ = {\n    ENTER: 13,\n    ESCAPE: 27,\n    SPACE: 32,\n    UP_ARROW: 38,\n    DOWN_ARROW: 40\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialMenu.prototype.CssClasses_ = {\n    CONTAINER: 'mdl-menu__container',\n    OUTLINE: 'mdl-menu__outline',\n    ITEM: 'mdl-menu__item',\n    ITEM_RIPPLE_CONTAINER: 'mdl-menu__item-ripple-container',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    // Statuses\n    IS_UPGRADED: 'is-upgraded',\n    IS_VISIBLE: 'is-visible',\n    IS_ANIMATING: 'is-animating',\n    // Alignment options\n    BOTTOM_LEFT: 'mdl-menu--bottom-left',\n    // This is the default.\n    BOTTOM_RIGHT: 'mdl-menu--bottom-right',\n    TOP_LEFT: 'mdl-menu--top-left',\n    TOP_RIGHT: 'mdl-menu--top-right',\n    UNALIGNED: 'mdl-menu--unaligned'\n};\n/**\n   * Initialize element.\n   */\nMaterialMenu.prototype.init = function () {\n    if (this.element_) {\n        // Create container for the menu.\n        var container = document.createElement('div');\n        container.classList.add(this.CssClasses_.CONTAINER);\n        this.element_.parentElement.insertBefore(container, this.element_);\n        this.element_.parentElement.removeChild(this.element_);\n        container.appendChild(this.element_);\n        this.container_ = container;\n        // Create outline for the menu (shadow and background).\n        var outline = document.createElement('div');\n        outline.classList.add(this.CssClasses_.OUTLINE);\n        this.outline_ = outline;\n        container.insertBefore(outline, this.element_);\n        // Find the \"for\" element and bind events to it.\n        var forElId = this.element_.getAttribute('for');\n        var forEl = null;\n        if (forElId) {\n            forEl = document.getElementById(forElId);\n            if (forEl) {\n                this.forElement_ = forEl;\n                forEl.addEventListener('click', this.handleForClick_.bind(this));\n                forEl.addEventListener('keydown', this.handleForKeyboardEvent_.bind(this));\n            }\n        }\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        this.boundItemKeydown = this.handleItemKeyboardEvent_.bind(this);\n        this.boundItemClick = this.handleItemClick_.bind(this);\n        for (var i = 0; i < items.length; i++) {\n            // Add a listener to each menu item.\n            items[i].addEventListener('click', this.boundItemClick);\n            // Add a tab index to each menu item.\n            items[i].tabIndex = '-1';\n            // Add a keyboard listener to each menu item.\n            items[i].addEventListener('keydown', this.boundItemKeydown);\n        }\n        // Add ripple classes to each item, if the user has enabled ripples.\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            for (i = 0; i < items.length; i++) {\n                var item = items[i];\n                var rippleContainer = document.createElement('span');\n                rippleContainer.classList.add(this.CssClasses_.ITEM_RIPPLE_CONTAINER);\n                var ripple = document.createElement('span');\n                ripple.classList.add(this.CssClasses_.RIPPLE);\n                rippleContainer.appendChild(ripple);\n                item.appendChild(rippleContainer);\n                item.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            }\n        }\n        // Copy alignment classes to the container, so the outline can use them.\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_LEFT)) {\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_LEFT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n            this.outline_.classList.add(this.CssClasses_.BOTTOM_RIGHT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n            this.outline_.classList.add(this.CssClasses_.TOP_LEFT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n            this.outline_.classList.add(this.CssClasses_.TOP_RIGHT);\n        }\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n            this.outline_.classList.add(this.CssClasses_.UNALIGNED);\n        }\n        container.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Handles a click on the \"for\" element, by positioning the menu and then\n   * toggling it.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleForClick_ = function (evt) {\n    if (this.element_ && this.forElement_) {\n        var rect = this.forElement_.getBoundingClientRect();\n        var forRect = this.forElement_.parentElement.getBoundingClientRect();\n        if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n        } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n            // Position below the \"for\" element, aligned to its right.\n            this.container_.style.right = forRect.right - rect.right + 'px';\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n            // Position above the \"for\" element, aligned to its left.\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\n        } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n            // Position above the \"for\" element, aligned to its right.\n            this.container_.style.right = forRect.right - rect.right + 'px';\n            this.container_.style.bottom = forRect.bottom - rect.top + 'px';\n        } else {\n            // Default: position below the \"for\" element, aligned to its left.\n            this.container_.style.left = this.forElement_.offsetLeft + 'px';\n            this.container_.style.top = this.forElement_.offsetTop + this.forElement_.offsetHeight + 'px';\n        }\n    }\n    this.toggle(evt);\n};\n/**\n   * Handles a keyboard event on the \"for\" element.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleForKeyboardEvent_ = function (evt) {\n    if (this.element_ && this.container_ && this.forElement_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\n                evt.preventDefault();\n                items[items.length - 1].focus();\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\n                evt.preventDefault();\n                items[0].focus();\n            }\n        }\n    }\n};\n/**\n   * Handles a keyboard event on an item.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleItemKeyboardEvent_ = function (evt) {\n    if (this.element_ && this.container_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM + ':not([disabled])');\n        if (items && items.length > 0 && this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n            var currentIndex = Array.prototype.slice.call(items).indexOf(evt.target);\n            if (evt.keyCode === this.Keycodes_.UP_ARROW) {\n                evt.preventDefault();\n                if (currentIndex > 0) {\n                    items[currentIndex - 1].focus();\n                } else {\n                    items[items.length - 1].focus();\n                }\n            } else if (evt.keyCode === this.Keycodes_.DOWN_ARROW) {\n                evt.preventDefault();\n                if (items.length > currentIndex + 1) {\n                    items[currentIndex + 1].focus();\n                } else {\n                    items[0].focus();\n                }\n            } else if (evt.keyCode === this.Keycodes_.SPACE || evt.keyCode === this.Keycodes_.ENTER) {\n                evt.preventDefault();\n                // Send mousedown and mouseup to trigger ripple.\n                var e = new MouseEvent('mousedown');\n                evt.target.dispatchEvent(e);\n                e = new MouseEvent('mouseup');\n                evt.target.dispatchEvent(e);\n                // Send click.\n                evt.target.click();\n            } else if (evt.keyCode === this.Keycodes_.ESCAPE) {\n                evt.preventDefault();\n                this.hide();\n            }\n        }\n    }\n};\n/**\n   * Handles a click event on an item.\n   *\n   * @param {Event} evt The event that fired.\n   * @private\n   */\nMaterialMenu.prototype.handleItemClick_ = function (evt) {\n    if (evt.target.getAttribute('disabled') !== null) {\n        evt.stopPropagation();\n    } else {\n        // Wait some time before closing menu, so the user can see the ripple.\n        this.closing_ = true;\n        window.setTimeout(function (evt) {\n            this.hide();\n            this.closing_ = false;\n        }.bind(this), this.Constant_.CLOSE_TIMEOUT);\n    }\n};\n/**\n   * Calculates the initial clip (for opening the menu) or final clip (for closing\n   * it), and applies it. This allows us to animate from or to the correct point,\n   * that is, the point it's aligned to in the \"for\" element.\n   *\n   * @param {Number} height Height of the clip rectangle\n   * @param {Number} width Width of the clip rectangle\n   * @private\n   */\nMaterialMenu.prototype.applyClip_ = function (height, width) {\n    if (this.element_.classList.contains(this.CssClasses_.UNALIGNED)) {\n        // Do not clip.\n        this.element_.style.clip = null;\n    } else if (this.element_.classList.contains(this.CssClasses_.BOTTOM_RIGHT)) {\n        // Clip to the top right corner of the menu.\n        this.element_.style.clip = 'rect(0 ' + width + 'px ' + '0 ' + width + 'px)';\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT)) {\n        // Clip to the bottom left corner of the menu.\n        this.element_.style.clip = 'rect(' + height + 'px 0 ' + height + 'px 0)';\n    } else if (this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n        // Clip to the bottom right corner of the menu.\n        this.element_.style.clip = 'rect(' + height + 'px ' + width + 'px ' + height + 'px ' + width + 'px)';\n    } else {\n        // Default: do not clip (same as clipping to the top left corner).\n        this.element_.style.clip = null;\n    }\n};\n/**\n   * Adds an event listener to clean up after the animation ends.\n   *\n   * @private\n   */\nMaterialMenu.prototype.addAnimationEndListener_ = function () {\n    var cleanup = function () {\n        this.element_.removeEventListener('transitionend', cleanup);\n        this.element_.removeEventListener('webkitTransitionEnd', cleanup);\n        this.element_.classList.remove(this.CssClasses_.IS_ANIMATING);\n    }.bind(this);\n    // Remove animation class once the transition is done.\n    this.element_.addEventListener('transitionend', cleanup);\n    this.element_.addEventListener('webkitTransitionEnd', cleanup);\n};\n/**\n   * Displays the menu.\n   *\n   * @public\n   */\nMaterialMenu.prototype.show = function (evt) {\n    if (this.element_ && this.container_ && this.outline_) {\n        // Measure the inner element.\n        var height = this.element_.getBoundingClientRect().height;\n        var width = this.element_.getBoundingClientRect().width;\n        // Apply the inner element's size to the container and outline.\n        this.container_.style.width = width + 'px';\n        this.container_.style.height = height + 'px';\n        this.outline_.style.width = width + 'px';\n        this.outline_.style.height = height + 'px';\n        var transitionDuration = this.Constant_.TRANSITION_DURATION_SECONDS * this.Constant_.TRANSITION_DURATION_FRACTION;\n        // Calculate transition delays for individual menu items, so that they fade\n        // in one at a time.\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        for (var i = 0; i < items.length; i++) {\n            var itemDelay = null;\n            if (this.element_.classList.contains(this.CssClasses_.TOP_LEFT) || this.element_.classList.contains(this.CssClasses_.TOP_RIGHT)) {\n                itemDelay = (height - items[i].offsetTop - items[i].offsetHeight) / height * transitionDuration + 's';\n            } else {\n                itemDelay = items[i].offsetTop / height * transitionDuration + 's';\n            }\n            items[i].style.transitionDelay = itemDelay;\n        }\n        // Apply the initial clip to the text before we start animating.\n        this.applyClip_(height, width);\n        // Wait for the next frame, turn on animation, and apply the final clip.\n        // Also make it visible. This triggers the transitions.\n        window.requestAnimationFrame(function () {\n            this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\n            this.element_.style.clip = 'rect(0 ' + width + 'px ' + height + 'px 0)';\n            this.container_.classList.add(this.CssClasses_.IS_VISIBLE);\n        }.bind(this));\n        // Clean up after the animation is complete.\n        this.addAnimationEndListener_();\n        // Add a click listener to the document, to close the menu.\n        var callback = function (e) {\n            // Check to see if the document is processing the same event that\n            // displayed the menu in the first place. If so, do nothing.\n            // Also check to see if the menu is in the process of closing itself, and\n            // do nothing in that case.\n            if (e !== evt && !this.closing_) {\n                document.removeEventListener('click', callback);\n                this.hide();\n            }\n        }.bind(this);\n        document.addEventListener('click', callback);\n    }\n};\n/**\n   * Hides the menu.\n   *\n   * @public\n   */\nMaterialMenu.prototype.hide = function () {\n    if (this.element_ && this.container_ && this.outline_) {\n        var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n        // Remove all transition delays; menu items fade out concurrently.\n        for (var i = 0; i < items.length; i++) {\n            items[i].style.transitionDelay = null;\n        }\n        // Measure the inner element.\n        var height = this.element_.getBoundingClientRect().height;\n        var width = this.element_.getBoundingClientRect().width;\n        // Turn on animation, and apply the final clip. Also make invisible.\n        // This triggers the transitions.\n        this.element_.classList.add(this.CssClasses_.IS_ANIMATING);\n        this.applyClip_(height, width);\n        this.container_.classList.remove(this.CssClasses_.IS_VISIBLE);\n        // Clean up after the animation is complete.\n        this.addAnimationEndListener_();\n    }\n};\n/**\n   * Displays or hides the menu, depending on current state.\n   *\n   * @public\n   */\nMaterialMenu.prototype.toggle = function (evt) {\n    if (this.container_.classList.contains(this.CssClasses_.IS_VISIBLE)) {\n        this.hide();\n    } else {\n        this.show(evt);\n    }\n};\n/**\n   * Downgrade the component.\n   *\n   * @private\n   */\nMaterialMenu.prototype.mdlDowngrade_ = function () {\n    var items = this.element_.querySelectorAll('.' + this.CssClasses_.ITEM);\n    for (var i = 0; i < items.length; i++) {\n        items[i].removeEventListener('click', this.boundItemClick);\n        items[i].removeEventListener('keydown', this.boundItemKeydown);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialMenu,\n    classAsString: 'MaterialMenu',\n    cssClass: 'mdl-js-menu',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Progress MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialProgress = function MaterialProgress(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialProgress = MaterialProgress;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialProgress.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialProgress.prototype.CssClasses_ = { INDETERMINATE_CLASS: 'mdl-progress__indeterminate' };\n/**\n   * Set the current progress of the progressbar.\n   *\n   * @param {Number} p Percentage of the progress (0-100)\n   * @public\n   */\nMaterialProgress.prototype.setProgress = function (p) {\n    if (this.element_.classList.contains(this.CssClasses_.INDETERMINATE_CLASS)) {\n        return;\n    }\n    this.progressbar_.style.width = p + '%';\n};\n/**\n   * Set the current progress of the buffer.\n   *\n   * @param {Number} p Percentage of the buffer (0-100)\n   * @public\n   */\nMaterialProgress.prototype.setBuffer = function (p) {\n    this.bufferbar_.style.width = p + '%';\n    this.auxbar_.style.width = 100 - p + '%';\n};\n/**\n   * Initialize element.\n   */\nMaterialProgress.prototype.init = function () {\n    if (this.element_) {\n        var el = document.createElement('div');\n        el.className = 'progressbar bar bar1';\n        this.element_.appendChild(el);\n        this.progressbar_ = el;\n        el = document.createElement('div');\n        el.className = 'bufferbar bar bar2';\n        this.element_.appendChild(el);\n        this.bufferbar_ = el;\n        el = document.createElement('div');\n        el.className = 'auxbar bar bar3';\n        this.element_.appendChild(el);\n        this.auxbar_ = el;\n        this.progressbar_.style.width = '0%';\n        this.bufferbar_.style.width = '100%';\n        this.auxbar_.style.width = '0%';\n        this.element_.classList.add('is-upgraded');\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialProgress.prototype.mdlDowngrade_ = function () {\n    while (this.element_.firstChild) {\n        this.element_.removeChild(this.element_.firstChild);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialProgress,\n    classAsString: 'MaterialProgress',\n    cssClass: 'mdl-js-progress',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Radio MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialRadio = function MaterialRadio(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialRadio = MaterialRadio;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialRadio.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialRadio.prototype.CssClasses_ = {\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked',\n    IS_UPGRADED: 'is-upgraded',\n    JS_RADIO: 'mdl-js-radio',\n    RADIO_BTN: 'mdl-radio__button',\n    RADIO_OUTER_CIRCLE: 'mdl-radio__outer-circle',\n    RADIO_INNER_CIRCLE: 'mdl-radio__inner-circle',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-radio__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple'\n};\n/**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.onChange_ = function (event) {\n    // Since other radio buttons don't get change events, we need to look for\n    // them to update their classes.\n    var radios = document.getElementsByClassName(this.CssClasses_.JS_RADIO);\n    for (var i = 0; i < radios.length; i++) {\n        var button = radios[i].querySelector('.' + this.CssClasses_.RADIO_BTN);\n        // Different name == different group, so no point updating those.\n        if (button.getAttribute('name') === this.btnElement_.getAttribute('name')) {\n            radios[i].MaterialRadio.updateClasses_();\n        }\n    }\n};\n/**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.onMouseup_ = function (event) {\n    this.blur_();\n};\n/**\n   * Update classes.\n   *\n   * @private\n   */\nMaterialRadio.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRadio.prototype.blur_ = function (event) {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.btnElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the components disabled state.\n   *\n   * @public\n   */\nMaterialRadio.prototype.checkDisabled = function () {\n    if (this.btnElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Check the components toggled state.\n   *\n   * @public\n   */\nMaterialRadio.prototype.checkToggleState = function () {\n    if (this.btnElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\n/**\n   * Disable radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.disable = function () {\n    this.btnElement_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.enable = function () {\n    this.btnElement_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Check radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.check = function () {\n    this.btnElement_.checked = true;\n    this.updateClasses_();\n};\n/**\n   * Uncheck radio.\n   *\n   * @public\n   */\nMaterialRadio.prototype.uncheck = function () {\n    this.btnElement_.checked = false;\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialRadio.prototype.init = function () {\n    if (this.element_) {\n        this.btnElement_ = this.element_.querySelector('.' + this.CssClasses_.RADIO_BTN);\n        var outerCircle = document.createElement('span');\n        outerCircle.classList.add(this.CssClasses_.RADIO_OUTER_CIRCLE);\n        var innerCircle = document.createElement('span');\n        innerCircle.classList.add(this.CssClasses_.RADIO_INNER_CIRCLE);\n        this.element_.appendChild(outerCircle);\n        this.element_.appendChild(innerCircle);\n        var rippleContainer;\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            rippleContainer.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            rippleContainer.addEventListener('mouseup', this.onMouseup_.bind(this));\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(ripple);\n            this.element_.appendChild(rippleContainer);\n        }\n        this.btnElement_.addEventListener('change', this.onChange_.bind(this));\n        this.btnElement_.addEventListener('focus', this.onFocus_.bind(this));\n        this.btnElement_.addEventListener('blur', this.onBlur_.bind(this));\n        this.element_.addEventListener('mouseup', this.onMouseup_.bind(this));\n        this.updateClasses_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialRadio,\n    classAsString: 'MaterialRadio',\n    cssClass: 'mdl-js-radio',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Slider MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSlider = function MaterialSlider(element) {\n    this.element_ = element;\n    // Browser feature detection.\n    this.isIE_ = window.navigator.msPointerEnabled;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialSlider = MaterialSlider;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialSlider.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialSlider.prototype.CssClasses_ = {\n    IE_CONTAINER: 'mdl-slider__ie-container',\n    SLIDER_CONTAINER: 'mdl-slider__container',\n    BACKGROUND_FLEX: 'mdl-slider__background-flex',\n    BACKGROUND_LOWER: 'mdl-slider__background-lower',\n    BACKGROUND_UPPER: 'mdl-slider__background-upper',\n    IS_LOWEST_VALUE: 'is-lowest-value',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle input on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onInput_ = function (event) {\n    this.updateValueStyles_();\n};\n/**\n   * Handle change on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onChange_ = function (event) {\n    this.updateValueStyles_();\n};\n/**\n   * Handle mouseup on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onMouseUp_ = function (event) {\n    event.target.blur();\n};\n/**\n   * Handle mousedown on container element.\n   * This handler is purpose is to not require the use to click\n   * exactly on the 2px slider element, as FireFox seems to be very\n   * strict about this.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.onContainerMouseDown_ = function (event) {\n    // If this click is not on the parent element (but rather some child)\n    // ignore. It may still bubble up.\n    if (event.target !== this.element_.parentElement) {\n        return;\n    }\n    // Discard the original event and create a new event that\n    // is on the slider element.\n    event.preventDefault();\n    var newEvent = new MouseEvent('mousedown', {\n        target: event.target,\n        buttons: event.buttons,\n        clientX: event.clientX,\n        clientY: this.element_.getBoundingClientRect().y\n    });\n    this.element_.dispatchEvent(newEvent);\n};\n/**\n   * Handle updating of values.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSlider.prototype.updateValueStyles_ = function (event) {\n    // Calculate and apply percentages to div structure behind slider.\n    var fraction = (this.element_.value - this.element_.min) / (this.element_.max - this.element_.min);\n    if (fraction === 0) {\n        this.element_.classList.add(this.CssClasses_.IS_LOWEST_VALUE);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_LOWEST_VALUE);\n    }\n    if (!this.isIE_) {\n        this.backgroundLower_.style.flex = fraction;\n        this.backgroundLower_.style.webkitFlex = fraction;\n        this.backgroundUpper_.style.flex = 1 - fraction;\n        this.backgroundUpper_.style.webkitFlex = 1 - fraction;\n    }\n};\n// Public methods.\n/**\n   * Disable slider.\n   *\n   * @public\n   */\nMaterialSlider.prototype.disable = function () {\n    this.element_.disabled = true;\n};\n/**\n   * Enable slider.\n   *\n   * @public\n   */\nMaterialSlider.prototype.enable = function () {\n    this.element_.disabled = false;\n};\n/**\n   * Update slider value.\n   *\n   * @param {Number} value The value to which to set the control (optional).\n   * @public\n   */\nMaterialSlider.prototype.change = function (value) {\n    if (typeof value !== 'undefined') {\n        this.element_.value = value;\n    }\n    this.updateValueStyles_();\n};\n/**\n   * Initialize element.\n   */\nMaterialSlider.prototype.init = function () {\n    if (this.element_) {\n        if (this.isIE_) {\n            // Since we need to specify a very large height in IE due to\n            // implementation limitations, we add a parent here that trims it down to\n            // a reasonable size.\n            var containerIE = document.createElement('div');\n            containerIE.classList.add(this.CssClasses_.IE_CONTAINER);\n            this.element_.parentElement.insertBefore(containerIE, this.element_);\n            this.element_.parentElement.removeChild(this.element_);\n            containerIE.appendChild(this.element_);\n        } else {\n            // For non-IE browsers, we need a div structure that sits behind the\n            // slider and allows us to style the left and right sides of it with\n            // different colors.\n            var container = document.createElement('div');\n            container.classList.add(this.CssClasses_.SLIDER_CONTAINER);\n            this.element_.parentElement.insertBefore(container, this.element_);\n            this.element_.parentElement.removeChild(this.element_);\n            container.appendChild(this.element_);\n            var backgroundFlex = document.createElement('div');\n            backgroundFlex.classList.add(this.CssClasses_.BACKGROUND_FLEX);\n            container.appendChild(backgroundFlex);\n            this.backgroundLower_ = document.createElement('div');\n            this.backgroundLower_.classList.add(this.CssClasses_.BACKGROUND_LOWER);\n            backgroundFlex.appendChild(this.backgroundLower_);\n            this.backgroundUpper_ = document.createElement('div');\n            this.backgroundUpper_.classList.add(this.CssClasses_.BACKGROUND_UPPER);\n            backgroundFlex.appendChild(this.backgroundUpper_);\n        }\n        this.boundInputHandler = this.onInput_.bind(this);\n        this.boundChangeHandler = this.onChange_.bind(this);\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\n        this.boundContainerMouseDownHandler = this.onContainerMouseDown_.bind(this);\n        this.element_.addEventListener('input', this.boundInputHandler);\n        this.element_.addEventListener('change', this.boundChangeHandler);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\n        this.element_.parentElement.addEventListener('mousedown', this.boundContainerMouseDownHandler);\n        this.updateValueStyles_();\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialSlider.prototype.mdlDowngrade_ = function () {\n    this.element_.removeEventListener('input', this.boundInputHandler);\n    this.element_.removeEventListener('change', this.boundChangeHandler);\n    this.element_.removeEventListener('mouseup', this.boundMouseUpHandler);\n    this.element_.parentElement.removeEventListener('mousedown', this.boundContainerMouseDownHandler);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSlider,\n    classAsString: 'MaterialSlider',\n    cssClass: 'mdl-js-slider',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Spinner MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   * @constructor\n   */\nvar MaterialSpinner = function MaterialSpinner(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialSpinner = MaterialSpinner;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialSpinner.prototype.Constant_ = { MDL_SPINNER_LAYER_COUNT: 4 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialSpinner.prototype.CssClasses_ = {\n    MDL_SPINNER_LAYER: 'mdl-spinner__layer',\n    MDL_SPINNER_CIRCLE_CLIPPER: 'mdl-spinner__circle-clipper',\n    MDL_SPINNER_CIRCLE: 'mdl-spinner__circle',\n    MDL_SPINNER_GAP_PATCH: 'mdl-spinner__gap-patch',\n    MDL_SPINNER_LEFT: 'mdl-spinner__left',\n    MDL_SPINNER_RIGHT: 'mdl-spinner__right'\n};\n/**\n   * Auxiliary method to create a spinner layer.\n   *\n   * @param {Number} index Index of the layer to be created.\n   * @public\n   */\nMaterialSpinner.prototype.createLayer = function (index) {\n    var layer = document.createElement('div');\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER);\n    layer.classList.add(this.CssClasses_.MDL_SPINNER_LAYER + '-' + index);\n    var leftClipper = document.createElement('div');\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    leftClipper.classList.add(this.CssClasses_.MDL_SPINNER_LEFT);\n    var gapPatch = document.createElement('div');\n    gapPatch.classList.add(this.CssClasses_.MDL_SPINNER_GAP_PATCH);\n    var rightClipper = document.createElement('div');\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE_CLIPPER);\n    rightClipper.classList.add(this.CssClasses_.MDL_SPINNER_RIGHT);\n    var circleOwners = [\n        leftClipper,\n        gapPatch,\n        rightClipper\n    ];\n    for (var i = 0; i < circleOwners.length; i++) {\n        var circle = document.createElement('div');\n        circle.classList.add(this.CssClasses_.MDL_SPINNER_CIRCLE);\n        circleOwners[i].appendChild(circle);\n    }\n    layer.appendChild(leftClipper);\n    layer.appendChild(gapPatch);\n    layer.appendChild(rightClipper);\n    this.element_.appendChild(layer);\n};\n/**\n   * Stops the spinner animation.\n   * Public method for users who need to stop the spinner for any reason.\n   *\n   * @public\n   */\nMaterialSpinner.prototype.stop = function () {\n    this.element_.classList.remove('is-active');\n};\n/**\n   * Starts the spinner animation.\n   * Public method for users who need to manually start the spinner for any reason\n   * (instead of just adding the 'is-active' class to their markup).\n   *\n   * @public\n   */\nMaterialSpinner.prototype.start = function () {\n    this.element_.classList.add('is-active');\n};\n/**\n   * Initialize element.\n   */\nMaterialSpinner.prototype.init = function () {\n    if (this.element_) {\n        for (var i = 1; i <= this.Constant_.MDL_SPINNER_LAYER_COUNT; i++) {\n            this.createLayer(i);\n        }\n        this.element_.classList.add('is-upgraded');\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSpinner,\n    classAsString: 'MaterialSpinner',\n    cssClass: 'mdl-js-spinner',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Checkbox MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialSwitch = function MaterialSwitch(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialSwitch = MaterialSwitch;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialSwitch.prototype.Constant_ = { TINY_TIMEOUT: 0.001 };\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialSwitch.prototype.CssClasses_ = {\n    INPUT: 'mdl-switch__input',\n    TRACK: 'mdl-switch__track',\n    THUMB: 'mdl-switch__thumb',\n    FOCUS_HELPER: 'mdl-switch__focus-helper',\n    RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE_CONTAINER: 'mdl-switch__ripple-container',\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE: 'mdl-ripple',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_CHECKED: 'is-checked'\n};\n/**\n   * Handle change of state.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSwitch.prototype.onChange_ = function (event) {\n    this.updateClasses_();\n};\n/**\n   * Handle focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSwitch.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus of element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSwitch.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle mouseup.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialSwitch.prototype.onMouseUp_ = function (event) {\n    this.blur_();\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkToggleState();\n};\n/**\n   * Add blur.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.blur_ = function (event) {\n    // TODO: figure out why there's a focus event being fired after our blur,\n    // so that we can avoid this hack.\n    window.setTimeout(function () {\n        this.inputElement_.blur();\n    }.bind(this), this.Constant_.TINY_TIMEOUT);\n};\n// Public methods.\n/**\n   * Check the components disabled state.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.checkDisabled = function () {\n    if (this.inputElement_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Check the components toggled state.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.checkToggleState = function () {\n    if (this.inputElement_.checked) {\n        this.element_.classList.add(this.CssClasses_.IS_CHECKED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_CHECKED);\n    }\n};\n/**\n   * Disable switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.disable = function () {\n    this.inputElement_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.enable = function () {\n    this.inputElement_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Activate switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.on = function () {\n    this.inputElement_.checked = true;\n    this.updateClasses_();\n};\n/**\n   * Deactivate switch.\n   *\n   * @public\n   */\nMaterialSwitch.prototype.off = function () {\n    this.inputElement_.checked = false;\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialSwitch.prototype.init = function () {\n    if (this.element_) {\n        this.inputElement_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        var track = document.createElement('div');\n        track.classList.add(this.CssClasses_.TRACK);\n        var thumb = document.createElement('div');\n        thumb.classList.add(this.CssClasses_.THUMB);\n        var focusHelper = document.createElement('span');\n        focusHelper.classList.add(this.CssClasses_.FOCUS_HELPER);\n        thumb.appendChild(focusHelper);\n        this.element_.appendChild(track);\n        this.element_.appendChild(thumb);\n        this.boundMouseUpHandler = this.onMouseUp_.bind(this);\n        if (this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT)) {\n            this.element_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            this.rippleContainerElement_ = document.createElement('span');\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CONTAINER);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_EFFECT);\n            this.rippleContainerElement_.classList.add(this.CssClasses_.RIPPLE_CENTER);\n            this.rippleContainerElement_.addEventListener('mouseup', this.boundMouseUpHandler);\n            var ripple = document.createElement('span');\n            ripple.classList.add(this.CssClasses_.RIPPLE);\n            this.rippleContainerElement_.appendChild(ripple);\n            this.element_.appendChild(this.rippleContainerElement_);\n        }\n        this.boundChangeHandler = this.onChange_.bind(this);\n        this.boundFocusHandler = this.onFocus_.bind(this);\n        this.boundBlurHandler = this.onBlur_.bind(this);\n        this.inputElement_.addEventListener('change', this.boundChangeHandler);\n        this.inputElement_.addEventListener('focus', this.boundFocusHandler);\n        this.inputElement_.addEventListener('blur', this.boundBlurHandler);\n        this.element_.addEventListener('mouseup', this.boundMouseUpHandler);\n        this.updateClasses_();\n        this.element_.classList.add('is-upgraded');\n    }\n};\n/**\n   * Downgrade the component.\n   *\n   * @private\n   */\nMaterialSwitch.prototype.mdlDowngrade_ = function () {\n    if (this.rippleContainerElement_) {\n        this.rippleContainerElement_.removeEventListener('mouseup', this.boundMouseUpHandler);\n    }\n    this.inputElement_.removeEventListener('change', this.boundChangeHandler);\n    this.inputElement_.removeEventListener('focus', this.boundFocusHandler);\n    this.inputElement_.removeEventListener('blur', this.boundBlurHandler);\n    this.element_.removeEventListener('mouseup', this.boundMouseUpHandler);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialSwitch,\n    classAsString: 'MaterialSwitch',\n    cssClass: 'mdl-js-switch',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Tabs MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTabs = function MaterialTabs(element) {\n    // Stores the HTML element.\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialTabs = MaterialTabs;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialTabs.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialTabs.prototype.CssClasses_ = {\n    TAB_CLASS: 'mdl-tabs__tab',\n    PANEL_CLASS: 'mdl-tabs__panel',\n    ACTIVE_CLASS: 'is-active',\n    UPGRADED_CLASS: 'is-upgraded',\n    MDL_JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    MDL_RIPPLE_CONTAINER: 'mdl-tabs__ripple-container',\n    MDL_RIPPLE: 'mdl-ripple',\n    MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events'\n};\n/**\n   * Handle clicks to a tabs component\n   *\n   * @private\n   */\nMaterialTabs.prototype.initTabs_ = function () {\n    if (this.element_.classList.contains(this.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\n        this.element_.classList.add(this.CssClasses_.MDL_JS_RIPPLE_EFFECT_IGNORE_EVENTS);\n    }\n    // Select element tabs, document panels\n    this.tabs_ = this.element_.querySelectorAll('.' + this.CssClasses_.TAB_CLASS);\n    this.panels_ = this.element_.querySelectorAll('.' + this.CssClasses_.PANEL_CLASS);\n    // Create new tabs for each tab element\n    for (var i = 0; i < this.tabs_.length; i++) {\n        new MaterialTab(this.tabs_[i], this);\n    }\n    this.element_.classList.add(this.CssClasses_.UPGRADED_CLASS);\n};\n/**\n   * Reset tab state, dropping active classes\n   *\n   * @private\n   */\nMaterialTabs.prototype.resetTabState_ = function () {\n    for (var k = 0; k < this.tabs_.length; k++) {\n        this.tabs_[k].classList.remove(this.CssClasses_.ACTIVE_CLASS);\n    }\n};\n/**\n   * Reset panel state, droping active classes\n   *\n   * @private\n   */\nMaterialTabs.prototype.resetPanelState_ = function () {\n    for (var j = 0; j < this.panels_.length; j++) {\n        this.panels_[j].classList.remove(this.CssClasses_.ACTIVE_CLASS);\n    }\n};\n/**\n   * Initialize element.\n   */\nMaterialTabs.prototype.init = function () {\n    if (this.element_) {\n        this.initTabs_();\n    }\n};\nfunction MaterialTab(tab, ctx) {\n    if (tab) {\n        if (ctx.element_.classList.contains(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_RIPPLE_CONTAINER);\n            rippleContainer.classList.add(ctx.CssClasses_.MDL_JS_RIPPLE_EFFECT);\n            var ripple = document.createElement('span');\n            ripple.classList.add(ctx.CssClasses_.MDL_RIPPLE);\n            rippleContainer.appendChild(ripple);\n            tab.appendChild(rippleContainer);\n        }\n        tab.addEventListener('click', function (e) {\n            e.preventDefault();\n            var href = tab.href.split('#')[1];\n            var panel = ctx.element_.querySelector('#' + href);\n            ctx.resetTabState_();\n            ctx.resetPanelState_();\n            tab.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\n            panel.classList.add(ctx.CssClasses_.ACTIVE_CLASS);\n        });\n    }\n}\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTabs,\n    classAsString: 'MaterialTabs',\n    cssClass: 'mdl-js-tabs'\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Textfield MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTextfield = function MaterialTextfield(element) {\n    this.element_ = element;\n    this.maxRows = this.Constant_.NO_MAX_ROWS;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialTextfield = MaterialTextfield;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialTextfield.prototype.Constant_ = {\n    NO_MAX_ROWS: -1,\n    MAX_ROWS_ATTRIBUTE: 'maxrows'\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialTextfield.prototype.CssClasses_ = {\n    LABEL: 'mdl-textfield__label',\n    INPUT: 'mdl-textfield__input',\n    IS_DIRTY: 'is-dirty',\n    IS_FOCUSED: 'is-focused',\n    IS_DISABLED: 'is-disabled',\n    IS_INVALID: 'is-invalid',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Handle input being entered.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTextfield.prototype.onKeyDown_ = function (event) {\n    var currentRowCount = event.target.value.split('\\n').length;\n    if (event.keyCode === 13) {\n        if (currentRowCount >= this.maxRows) {\n            event.preventDefault();\n        }\n    }\n};\n/**\n   * Handle focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTextfield.prototype.onFocus_ = function (event) {\n    this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle lost focus.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTextfield.prototype.onBlur_ = function (event) {\n    this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n/**\n   * Handle class updates.\n   *\n   * @private\n   */\nMaterialTextfield.prototype.updateClasses_ = function () {\n    this.checkDisabled();\n    this.checkValidity();\n    this.checkDirty();\n};\n// Public methods.\n/**\n   * Check the disabled state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkDisabled = function () {\n    if (this.input_.disabled) {\n        this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n    }\n};\n/**\n   * Check the validity state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkValidity = function () {\n    if (this.input_.validity.valid) {\n        this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n    } else {\n        this.element_.classList.add(this.CssClasses_.IS_INVALID);\n    }\n};\n/**\n   * Check the dirty state and update field accordingly.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.checkDirty = function () {\n    if (this.input_.value && this.input_.value.length > 0) {\n        this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n    }\n};\n/**\n   * Disable text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.disable = function () {\n    this.input_.disabled = true;\n    this.updateClasses_();\n};\n/**\n   * Enable text field.\n   *\n   * @public\n   */\nMaterialTextfield.prototype.enable = function () {\n    this.input_.disabled = false;\n    this.updateClasses_();\n};\n/**\n   * Update text field value.\n   *\n   * @param {String} value The value to which to set the control (optional).\n   * @public\n   */\nMaterialTextfield.prototype.change = function (value) {\n    if (value) {\n        this.input_.value = value;\n    }\n    this.updateClasses_();\n};\n/**\n   * Initialize element.\n   */\nMaterialTextfield.prototype.init = function () {\n    if (this.element_) {\n        this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n        this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n        if (this.input_) {\n            if (this.input_.hasAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE)) {\n                this.maxRows = parseInt(this.input_.getAttribute(this.Constant_.MAX_ROWS_ATTRIBUTE), 10);\n                if (isNaN(this.maxRows)) {\n                    this.maxRows = this.Constant_.NO_MAX_ROWS;\n                }\n            }\n            this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n            this.boundFocusHandler = this.onFocus_.bind(this);\n            this.boundBlurHandler = this.onBlur_.bind(this);\n            this.input_.addEventListener('input', this.boundUpdateClassesHandler);\n            this.input_.addEventListener('focus', this.boundFocusHandler);\n            this.input_.addEventListener('blur', this.boundBlurHandler);\n            if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n                // TODO: This should handle pasting multi line text.\n                // Currently doesn't.\n                this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n                this.input_.addEventListener('keydown', this.boundKeyDownHandler);\n            }\n            this.updateClasses_();\n            this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n        }\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialTextfield.prototype.mdlDowngrade_ = function () {\n    this.input_.removeEventListener('input', this.boundUpdateClassesHandler);\n    this.input_.removeEventListener('focus', this.boundFocusHandler);\n    this.input_.removeEventListener('blur', this.boundBlurHandler);\n    if (this.boundKeyDownHandler) {\n        this.input_.removeEventListener('keydown', this.boundKeyDownHandler);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTextfield,\n    classAsString: 'MaterialTextfield',\n    cssClass: 'mdl-js-textfield',\n    widget: true\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Tooltip MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialTooltip = function MaterialTooltip(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialTooltip = MaterialTooltip;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialTooltip.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialTooltip.prototype.CssClasses_ = { IS_ACTIVE: 'is-active' };\n/**\n   * Handle mouseenter for tooltip.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTooltip.prototype.handleMouseEnter_ = function (event) {\n    event.stopPropagation();\n    var props = event.target.getBoundingClientRect();\n    var left = props.left + props.width / 2;\n    var marginLeft = -1 * (this.element_.offsetWidth / 2);\n    if (left + marginLeft < 0) {\n        this.element_.style.left = 0;\n        this.element_.style.marginLeft = 0;\n    } else {\n        this.element_.style.left = left + 'px';\n        this.element_.style.marginLeft = marginLeft + 'px';\n    }\n    this.element_.style.top = props.top + props.height + 10 + 'px';\n    this.element_.classList.add(this.CssClasses_.IS_ACTIVE);\n    window.addEventListener('scroll', this.boundMouseLeaveHandler, false);\n    window.addEventListener('touchmove', this.boundMouseLeaveHandler, false);\n};\n/**\n   * Handle mouseleave for tooltip.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialTooltip.prototype.handleMouseLeave_ = function (event) {\n    event.stopPropagation();\n    this.element_.classList.remove(this.CssClasses_.IS_ACTIVE);\n    window.removeEventListener('scroll', this.boundMouseLeaveHandler);\n    window.removeEventListener('touchmove', this.boundMouseLeaveHandler, false);\n};\n/**\n   * Initialize element.\n   */\nMaterialTooltip.prototype.init = function () {\n    if (this.element_) {\n        var forElId = this.element_.getAttribute('for');\n        if (forElId) {\n            this.forElement_ = document.getElementById(forElId);\n        }\n        if (this.forElement_) {\n            // Tabindex needs to be set for `blur` events to be emitted\n            if (!this.forElement_.getAttribute('tabindex')) {\n                this.forElement_.setAttribute('tabindex', '0');\n            }\n            this.boundMouseEnterHandler = this.handleMouseEnter_.bind(this);\n            this.boundMouseLeaveHandler = this.handleMouseLeave_.bind(this);\n            this.forElement_.addEventListener('mouseenter', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('click', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('blur', this.boundMouseLeaveHandler);\n            this.forElement_.addEventListener('touchstart', this.boundMouseEnterHandler, false);\n            this.forElement_.addEventListener('mouseleave', this.boundMouseLeaveHandler);\n        }\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialTooltip.prototype.mdlDowngrade_ = function () {\n    if (this.forElement_) {\n        this.forElement_.removeEventListener('mouseenter', this.boundMouseEnterHandler, false);\n        this.forElement_.removeEventListener('click', this.boundMouseEnterHandler, false);\n        this.forElement_.removeEventListener('touchstart', this.boundMouseEnterHandler, false);\n        this.forElement_.removeEventListener('mouseleave', this.boundMouseLeaveHandler);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialTooltip,\n    classAsString: 'MaterialTooltip',\n    cssClass: 'mdl-tooltip'\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Layout MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialLayout = function MaterialLayout(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialLayout = MaterialLayout;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialLayout.prototype.Constant_ = {\n    MAX_WIDTH: '(max-width: 1024px)',\n    TAB_SCROLL_PIXELS: 100,\n    MENU_ICON: 'menu',\n    CHEVRON_LEFT: 'chevron_left',\n    CHEVRON_RIGHT: 'chevron_right'\n};\n/**\n   * Modes.\n   *\n   * @enum {Number}\n   * @private\n   */\nMaterialLayout.prototype.Mode_ = {\n    STANDARD: 0,\n    SEAMED: 1,\n    WATERFALL: 2,\n    SCROLL: 3\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialLayout.prototype.CssClasses_ = {\n    INNER_CONTAINER: 'mdl-layout__inner-container',\n    HEADER: 'mdl-layout__header',\n    DRAWER: 'mdl-layout__drawer',\n    CONTENT: 'mdl-layout__content',\n    DRAWER_BTN: 'mdl-layout__drawer-button',\n    ICON: 'material-icons',\n    JS_RIPPLE_EFFECT: 'mdl-js-ripple-effect',\n    RIPPLE_CONTAINER: 'mdl-layout__tab-ripple-container',\n    RIPPLE: 'mdl-ripple',\n    RIPPLE_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    HEADER_SEAMED: 'mdl-layout__header--seamed',\n    HEADER_WATERFALL: 'mdl-layout__header--waterfall',\n    HEADER_SCROLL: 'mdl-layout__header--scroll',\n    FIXED_HEADER: 'mdl-layout--fixed-header',\n    OBFUSCATOR: 'mdl-layout__obfuscator',\n    TAB_BAR: 'mdl-layout__tab-bar',\n    TAB_CONTAINER: 'mdl-layout__tab-bar-container',\n    TAB: 'mdl-layout__tab',\n    TAB_BAR_BUTTON: 'mdl-layout__tab-bar-button',\n    TAB_BAR_LEFT_BUTTON: 'mdl-layout__tab-bar-left-button',\n    TAB_BAR_RIGHT_BUTTON: 'mdl-layout__tab-bar-right-button',\n    PANEL: 'mdl-layout__tab-panel',\n    HAS_DRAWER: 'has-drawer',\n    HAS_TABS: 'has-tabs',\n    HAS_SCROLLING_HEADER: 'has-scrolling-header',\n    CASTING_SHADOW: 'is-casting-shadow',\n    IS_COMPACT: 'is-compact',\n    IS_SMALL_SCREEN: 'is-small-screen',\n    IS_DRAWER_OPEN: 'is-visible',\n    IS_ACTIVE: 'is-active',\n    IS_UPGRADED: 'is-upgraded',\n    IS_ANIMATING: 'is-animating',\n    ON_LARGE_SCREEN: 'mdl-layout--large-screen-only',\n    ON_SMALL_SCREEN: 'mdl-layout--small-screen-only'\n};\n/**\n   * Handles scrolling on the content.\n   *\n   * @private\n   */\nMaterialLayout.prototype.contentScrollHandler_ = function () {\n    if (this.header_.classList.contains(this.CssClasses_.IS_ANIMATING)) {\n        return;\n    }\n    if (this.content_.scrollTop > 0 && !this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\n        this.header_.classList.add(this.CssClasses_.IS_COMPACT);\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n    } else if (this.content_.scrollTop <= 0 && this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n    }\n};\n/**\n   * Handles changes in screen size.\n   *\n   * @private\n   */\nMaterialLayout.prototype.screenSizeHandler_ = function () {\n    if (this.screenSizeMediaQuery_.matches) {\n        this.element_.classList.add(this.CssClasses_.IS_SMALL_SCREEN);\n    } else {\n        this.element_.classList.remove(this.CssClasses_.IS_SMALL_SCREEN);\n        // Collapse drawer (if any) when moving to a large screen size.\n        if (this.drawer_) {\n            this.drawer_.classList.remove(this.CssClasses_.IS_DRAWER_OPEN);\n        }\n    }\n};\n/**\n   * Handles toggling of the drawer.\n   *\n   * @private\n   */\nMaterialLayout.prototype.drawerToggleHandler_ = function () {\n    this.drawer_.classList.toggle(this.CssClasses_.IS_DRAWER_OPEN);\n};\n/**\n   * Handles (un)setting the `is-animating` class\n   *\n   * @private\n   */\nMaterialLayout.prototype.headerTransitionEndHandler_ = function () {\n    this.header_.classList.remove(this.CssClasses_.IS_ANIMATING);\n};\n/**\n   * Handles expanding the header on click\n   *\n   * @private\n   */\nMaterialLayout.prototype.headerClickHandler_ = function () {\n    if (this.header_.classList.contains(this.CssClasses_.IS_COMPACT)) {\n        this.header_.classList.remove(this.CssClasses_.IS_COMPACT);\n        this.header_.classList.add(this.CssClasses_.IS_ANIMATING);\n    }\n};\n/**\n   * Reset tab state, dropping active classes\n   *\n   * @private\n   */\nMaterialLayout.prototype.resetTabState_ = function (tabBar) {\n    for (var k = 0; k < tabBar.length; k++) {\n        tabBar[k].classList.remove(this.CssClasses_.IS_ACTIVE);\n    }\n};\n/**\n   * Reset panel state, droping active classes\n   *\n   * @private\n   */\nMaterialLayout.prototype.resetPanelState_ = function (panels) {\n    for (var j = 0; j < panels.length; j++) {\n        panels[j].classList.remove(this.CssClasses_.IS_ACTIVE);\n    }\n};\n/**\n   * Initialize element.\n   */\nMaterialLayout.prototype.init = function () {\n    if (this.element_) {\n        var directChildren = this.element_.childNodes;\n        for (var c = 0; c < directChildren.length; c++) {\n            var child = directChildren[c];\n            if (child.classList && child.classList.contains(this.CssClasses_.HEADER)) {\n                this.header_ = child;\n            }\n            if (child.classList && child.classList.contains(this.CssClasses_.DRAWER)) {\n                this.drawer_ = child;\n            }\n            if (child.classList && child.classList.contains(this.CssClasses_.CONTENT)) {\n                this.content_ = child;\n            }\n        }\n        if (this.header_) {\n            this.tabBar_ = this.header_.querySelector('.' + this.CssClasses_.TAB_BAR);\n        }\n        var mode = this.Mode_.STANDARD;\n        // Keep an eye on screen size, and add/remove auxiliary class for styling\n        // of small screens.\n        this.screenSizeMediaQuery_ = window.matchMedia(this.Constant_.MAX_WIDTH);\n        this.screenSizeMediaQuery_.addListener(this.screenSizeHandler_.bind(this));\n        this.screenSizeHandler_();\n        if (this.header_) {\n            if (this.header_.classList.contains(this.CssClasses_.HEADER_SEAMED)) {\n                mode = this.Mode_.SEAMED;\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_WATERFALL)) {\n                mode = this.Mode_.WATERFALL;\n                this.header_.addEventListener('transitionend', this.headerTransitionEndHandler_.bind(this));\n                this.header_.addEventListener('click', this.headerClickHandler_.bind(this));\n            } else if (this.header_.classList.contains(this.CssClasses_.HEADER_SCROLL)) {\n                mode = this.Mode_.SCROLL;\n                this.element_.classList.add(this.CssClasses_.HAS_SCROLLING_HEADER);\n            }\n            if (mode === this.Mode_.STANDARD) {\n                this.header_.classList.add(this.CssClasses_.CASTING_SHADOW);\n                if (this.tabBar_) {\n                    this.tabBar_.classList.add(this.CssClasses_.CASTING_SHADOW);\n                }\n            } else if (mode === this.Mode_.SEAMED || mode === this.Mode_.SCROLL) {\n                this.header_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n                if (this.tabBar_) {\n                    this.tabBar_.classList.remove(this.CssClasses_.CASTING_SHADOW);\n                }\n            } else if (mode === this.Mode_.WATERFALL) {\n                // Add and remove shadows depending on scroll position.\n                // Also add/remove auxiliary class for styling of the compact version of\n                // the header.\n                this.content_.addEventListener('scroll', this.contentScrollHandler_.bind(this));\n                this.contentScrollHandler_();\n            }\n        }\n        // Add drawer toggling button to our layout, if we have an openable drawer.\n        if (this.drawer_) {\n            var drawerButton = document.createElement('div');\n            drawerButton.classList.add(this.CssClasses_.DRAWER_BTN);\n            if (this.drawer_.classList.contains(this.CssClasses_.ON_LARGE_SCREEN)) {\n                //If drawer has ON_LARGE_SCREEN class then add it to the drawer toggle button as well.\n                drawerButton.classList.add(this.CssClasses_.ON_LARGE_SCREEN);\n            } else if (this.drawer_.classList.contains(this.CssClasses_.ON_SMALL_SCREEN)) {\n                //If drawer has ON_SMALL_SCREEN class then add it to the drawer toggle button as well.\n                drawerButton.classList.add(this.CssClasses_.ON_SMALL_SCREEN);\n            }\n            var drawerButtonIcon = document.createElement('i');\n            drawerButtonIcon.classList.add(this.CssClasses_.ICON);\n            drawerButtonIcon.textContent = this.Constant_.MENU_ICON;\n            drawerButton.appendChild(drawerButtonIcon);\n            drawerButton.addEventListener('click', this.drawerToggleHandler_.bind(this));\n            // Add a class if the layout has a drawer, for altering the left padding.\n            // Adds the HAS_DRAWER to the elements since this.header_ may or may\n            // not be present.\n            this.element_.classList.add(this.CssClasses_.HAS_DRAWER);\n            // If we have a fixed header, add the button to the header rather than\n            // the layout.\n            if (this.element_.classList.contains(this.CssClasses_.FIXED_HEADER)) {\n                this.header_.insertBefore(drawerButton, this.header_.firstChild);\n            } else {\n                this.element_.insertBefore(drawerButton, this.content_);\n            }\n            var obfuscator = document.createElement('div');\n            obfuscator.classList.add(this.CssClasses_.OBFUSCATOR);\n            this.element_.appendChild(obfuscator);\n            obfuscator.addEventListener('click', this.drawerToggleHandler_.bind(this));\n        }\n        // Initialize tabs, if any.\n        if (this.header_ && this.tabBar_) {\n            this.element_.classList.add(this.CssClasses_.HAS_TABS);\n            var tabContainer = document.createElement('div');\n            tabContainer.classList.add(this.CssClasses_.TAB_CONTAINER);\n            this.header_.insertBefore(tabContainer, this.tabBar_);\n            this.header_.removeChild(this.tabBar_);\n            var leftButton = document.createElement('div');\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\n            leftButton.classList.add(this.CssClasses_.TAB_BAR_LEFT_BUTTON);\n            var leftButtonIcon = document.createElement('i');\n            leftButtonIcon.classList.add(this.CssClasses_.ICON);\n            leftButtonIcon.textContent = this.Constant_.CHEVRON_LEFT;\n            leftButton.appendChild(leftButtonIcon);\n            leftButton.addEventListener('click', function () {\n                this.tabBar_.scrollLeft -= this.Constant_.TAB_SCROLL_PIXELS;\n            }.bind(this));\n            var rightButton = document.createElement('div');\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_BUTTON);\n            rightButton.classList.add(this.CssClasses_.TAB_BAR_RIGHT_BUTTON);\n            var rightButtonIcon = document.createElement('i');\n            rightButtonIcon.classList.add(this.CssClasses_.ICON);\n            rightButtonIcon.textContent = this.Constant_.CHEVRON_RIGHT;\n            rightButton.appendChild(rightButtonIcon);\n            rightButton.addEventListener('click', function () {\n                this.tabBar_.scrollLeft += this.Constant_.TAB_SCROLL_PIXELS;\n            }.bind(this));\n            tabContainer.appendChild(leftButton);\n            tabContainer.appendChild(this.tabBar_);\n            tabContainer.appendChild(rightButton);\n            // Add and remove buttons depending on scroll position.\n            var tabScrollHandler = function () {\n                if (this.tabBar_.scrollLeft > 0) {\n                    leftButton.classList.add(this.CssClasses_.IS_ACTIVE);\n                } else {\n                    leftButton.classList.remove(this.CssClasses_.IS_ACTIVE);\n                }\n                if (this.tabBar_.scrollLeft < this.tabBar_.scrollWidth - this.tabBar_.offsetWidth) {\n                    rightButton.classList.add(this.CssClasses_.IS_ACTIVE);\n                } else {\n                    rightButton.classList.remove(this.CssClasses_.IS_ACTIVE);\n                }\n            }.bind(this);\n            this.tabBar_.addEventListener('scroll', tabScrollHandler);\n            tabScrollHandler();\n            if (this.tabBar_.classList.contains(this.CssClasses_.JS_RIPPLE_EFFECT)) {\n                this.tabBar_.classList.add(this.CssClasses_.RIPPLE_IGNORE_EVENTS);\n            }\n            // Select element tabs, document panels\n            var tabs = this.tabBar_.querySelectorAll('.' + this.CssClasses_.TAB);\n            var panels = this.content_.querySelectorAll('.' + this.CssClasses_.PANEL);\n            // Create new tabs for each tab element\n            for (var i = 0; i < tabs.length; i++) {\n                new MaterialLayoutTab(tabs[i], tabs, panels, this);\n            }\n        }\n        var innerContainer = document.createElement('div');\n        innerContainer.classList.add(this.CssClasses_.INNER_CONTAINER);\n        while (this.element_.firstChild) {\n            innerContainer.appendChild(this.element_.firstChild);\n        }\n        this.element_.appendChild(innerContainer);\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\nfunction MaterialLayoutTab(tab, tabs, panels, layout) {\n    if (tab) {\n        if (layout.tabBar_.classList.contains(layout.CssClasses_.JS_RIPPLE_EFFECT)) {\n            var rippleContainer = document.createElement('span');\n            rippleContainer.classList.add(layout.CssClasses_.RIPPLE_CONTAINER);\n            rippleContainer.classList.add(layout.CssClasses_.JS_RIPPLE_EFFECT);\n            var ripple = document.createElement('span');\n            ripple.classList.add(layout.CssClasses_.RIPPLE);\n            rippleContainer.appendChild(ripple);\n            tab.appendChild(rippleContainer);\n        }\n        tab.addEventListener('click', function (e) {\n            e.preventDefault();\n            var href = tab.href.split('#')[1];\n            var panel = layout.content_.querySelector('#' + href);\n            layout.resetTabState_(tabs);\n            layout.resetPanelState_(panels);\n            tab.classList.add(layout.CssClasses_.IS_ACTIVE);\n            panel.classList.add(layout.CssClasses_.IS_ACTIVE);\n        });\n    }\n}\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialLayout,\n    classAsString: 'MaterialLayout',\n    cssClass: 'mdl-js-layout'\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Data Table Card MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialDataTable = function MaterialDataTable(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialDataTable = MaterialDataTable;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialDataTable.prototype.Constant_ = {};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialDataTable.prototype.CssClasses_ = {\n    DATA_TABLE: 'mdl-data-table',\n    SELECTABLE: 'mdl-data-table--selectable',\n    IS_SELECTED: 'is-selected',\n    IS_UPGRADED: 'is-upgraded'\n};\n/**\n   * Generates and returns a function that toggles the selection state of a\n   * single row (or multiple rows).\n   *\n   * @param {HTMLElement} checkbox Checkbox that toggles the selection state.\n   * @param {HTMLElement} row Row to toggle when checkbox changes.\n   * @param {HTMLElement[]} rows Rows to toggle when checkbox changes.\n   * @private\n   */\nMaterialDataTable.prototype.selectRow_ = function (checkbox, row, rows) {\n    if (row) {\n        return function () {\n            if (checkbox.checked) {\n                row.classList.add(this.CssClasses_.IS_SELECTED);\n            } else {\n                row.classList.remove(this.CssClasses_.IS_SELECTED);\n            }\n        }.bind(this);\n    }\n    if (rows) {\n        return function () {\n            var i;\n            var el;\n            if (checkbox.checked) {\n                for (i = 0; i < rows.length; i++) {\n                    el = rows[i].querySelector('td').querySelector('.mdl-checkbox');\n                    el.MaterialCheckbox.check();\n                    rows[i].classList.add(this.CssClasses_.IS_SELECTED);\n                }\n            } else {\n                for (i = 0; i < rows.length; i++) {\n                    el = rows[i].querySelector('td').querySelector('.mdl-checkbox');\n                    el.MaterialCheckbox.uncheck();\n                    rows[i].classList.remove(this.CssClasses_.IS_SELECTED);\n                }\n            }\n        }.bind(this);\n    }\n};\n/**\n   * Creates a checkbox for a single or or multiple rows and hooks up the\n   * event handling.\n   *\n   * @param {HTMLElement} row Row to toggle when checkbox changes.\n   * @param {HTMLElement[]} rows Rows to toggle when checkbox changes.\n   * @private\n   */\nMaterialDataTable.prototype.createCheckbox_ = function (row, rows) {\n    var label = document.createElement('label');\n    label.classList.add('mdl-checkbox');\n    label.classList.add('mdl-js-checkbox');\n    label.classList.add('mdl-js-ripple-effect');\n    label.classList.add('mdl-data-table__select');\n    var checkbox = document.createElement('input');\n    checkbox.type = 'checkbox';\n    checkbox.classList.add('mdl-checkbox__input');\n    if (row) {\n        checkbox.addEventListener('change', this.selectRow_(checkbox, row));\n    } else if (rows) {\n        checkbox.addEventListener('change', this.selectRow_(checkbox, null, rows));\n    }\n    label.appendChild(checkbox);\n    componentHandler.upgradeElement(label, 'MaterialCheckbox');\n    return label;\n};\n/**\n   * Initialize element.\n   */\nMaterialDataTable.prototype.init = function () {\n    if (this.element_) {\n        var firstHeader = this.element_.querySelector('th');\n        var rows = this.element_.querySelector('tbody').querySelectorAll('tr');\n        if (this.element_.classList.contains(this.CssClasses_.SELECTABLE)) {\n            var th = document.createElement('th');\n            var headerCheckbox = this.createCheckbox_(null, rows);\n            th.appendChild(headerCheckbox);\n            firstHeader.parentElement.insertBefore(th, firstHeader);\n            for (var i = 0; i < rows.length; i++) {\n                var firstCell = rows[i].querySelector('td');\n                if (firstCell) {\n                    var td = document.createElement('td');\n                    var rowCheckbox = this.createCheckbox_(rows[i]);\n                    td.appendChild(rowCheckbox);\n                    rows[i].insertBefore(td, firstCell);\n                }\n            }\n        }\n        this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialDataTable,\n    classAsString: 'MaterialDataTable',\n    cssClass: 'mdl-js-data-table'\n});\n/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n   * Class constructor for Ripple MDL component.\n   * Implements MDL component design pattern defined at:\n   * https://github.com/jasonmayes/mdl-component-design-pattern\n   *\n   * @param {HTMLElement} element The element that will be upgraded.\n   */\nvar MaterialRipple = function MaterialRipple(element) {\n    this.element_ = element;\n    // Initialize instance.\n    this.init();\n};\nwindow.MaterialRipple = MaterialRipple;\n/**\n   * Store constants in one place so they can be updated easily.\n   *\n   * @enum {String | Number}\n   * @private\n   */\nMaterialRipple.prototype.Constant_ = {\n    INITIAL_SCALE: 'scale(0.0001, 0.0001)',\n    INITIAL_SIZE: '1px',\n    INITIAL_OPACITY: '0.4',\n    FINAL_OPACITY: '0',\n    FINAL_SCALE: ''\n};\n/**\n   * Store strings for class names defined by this component that are used in\n   * JavaScript. This allows us to simply change it in one place should we\n   * decide to modify at a later date.\n   *\n   * @enum {String}\n   * @private\n   */\nMaterialRipple.prototype.CssClasses_ = {\n    RIPPLE_CENTER: 'mdl-ripple--center',\n    RIPPLE_EFFECT_IGNORE_EVENTS: 'mdl-js-ripple-effect--ignore-events',\n    RIPPLE: 'mdl-ripple',\n    IS_ANIMATING: 'is-animating',\n    IS_VISIBLE: 'is-visible'\n};\n/**\n   * Handle mouse / finger down on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRipple.prototype.downHandler_ = function (event) {\n    if (!this.rippleElement_.style.width && !this.rippleElement_.style.height) {\n        var rect = this.element_.getBoundingClientRect();\n        this.boundHeight = rect.height;\n        this.boundWidth = rect.width;\n        this.rippleSize_ = Math.sqrt(rect.width * rect.width + rect.height * rect.height) * 2 + 2;\n        this.rippleElement_.style.width = this.rippleSize_ + 'px';\n        this.rippleElement_.style.height = this.rippleSize_ + 'px';\n    }\n    this.rippleElement_.classList.add(this.CssClasses_.IS_VISIBLE);\n    if (event.type === 'mousedown' && this.ignoringMouseDown_) {\n        this.ignoringMouseDown_ = false;\n    } else {\n        if (event.type === 'touchstart') {\n            this.ignoringMouseDown_ = true;\n        }\n        var frameCount = this.getFrameCount();\n        if (frameCount > 0) {\n            return;\n        }\n        this.setFrameCount(1);\n        var bound = event.currentTarget.getBoundingClientRect();\n        var x;\n        var y;\n        // Check if we are handling a keyboard click.\n        if (event.clientX === 0 && event.clientY === 0) {\n            x = Math.round(bound.width / 2);\n            y = Math.round(bound.height / 2);\n        } else {\n            var clientX = event.clientX ? event.clientX : event.touches[0].clientX;\n            var clientY = event.clientY ? event.clientY : event.touches[0].clientY;\n            x = Math.round(clientX - bound.left);\n            y = Math.round(clientY - bound.top);\n        }\n        this.setRippleXY(x, y);\n        this.setRippleStyles(true);\n        window.requestAnimationFrame(this.animFrameHandler.bind(this));\n    }\n};\n/**\n   * Handle mouse / finger up on element.\n   *\n   * @param {Event} event The event that fired.\n   * @private\n   */\nMaterialRipple.prototype.upHandler_ = function (event) {\n    // Don't fire for the artificial \"mouseup\" generated by a double-click.\n    if (event && event.detail !== 2) {\n        this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n    }\n    // Allow a repaint to occur before removing this class, so the animation\n    // shows for tap events, which seem to trigger a mouseup too soon after\n    // mousedown.\n    window.setTimeout(function () {\n        this.rippleElement_.classList.remove(this.CssClasses_.IS_VISIBLE);\n    }.bind(this), 0);\n};\n/**\n   * Initialize element.\n   */\nMaterialRipple.prototype.init = function () {\n    if (this.element_) {\n        var recentering = this.element_.classList.contains(this.CssClasses_.RIPPLE_CENTER);\n        if (!this.element_.classList.contains(this.CssClasses_.RIPPLE_EFFECT_IGNORE_EVENTS)) {\n            this.rippleElement_ = this.element_.querySelector('.' + this.CssClasses_.RIPPLE);\n            this.frameCount_ = 0;\n            this.rippleSize_ = 0;\n            this.x_ = 0;\n            this.y_ = 0;\n            // Touch start produces a compat mouse down event, which would cause a\n            // second ripples. To avoid that, we use this property to ignore the first\n            // mouse down after a touch start.\n            this.ignoringMouseDown_ = false;\n            this.boundDownHandler = this.downHandler_.bind(this);\n            this.element_.addEventListener('mousedown', this.boundDownHandler);\n            this.element_.addEventListener('touchstart', this.boundDownHandler);\n            this.boundUpHandler = this.upHandler_.bind(this);\n            this.element_.addEventListener('mouseup', this.boundUpHandler);\n            this.element_.addEventListener('mouseleave', this.boundUpHandler);\n            this.element_.addEventListener('touchend', this.boundUpHandler);\n            this.element_.addEventListener('blur', this.boundUpHandler);\n            this.getFrameCount = function () {\n                return this.frameCount_;\n            };\n            this.setFrameCount = function (fC) {\n                this.frameCount_ = fC;\n            };\n            this.getRippleElement = function () {\n                return this.rippleElement_;\n            };\n            this.setRippleXY = function (newX, newY) {\n                this.x_ = newX;\n                this.y_ = newY;\n            };\n            this.setRippleStyles = function (start) {\n                if (this.rippleElement_ !== null) {\n                    var transformString;\n                    var scale;\n                    var size;\n                    var offset = 'translate(' + this.x_ + 'px, ' + this.y_ + 'px)';\n                    if (start) {\n                        scale = this.Constant_.INITIAL_SCALE;\n                        size = this.Constant_.INITIAL_SIZE;\n                    } else {\n                        scale = this.Constant_.FINAL_SCALE;\n                        size = this.rippleSize_ + 'px';\n                        if (recentering) {\n                            offset = 'translate(' + this.boundWidth / 2 + 'px, ' + this.boundHeight / 2 + 'px)';\n                        }\n                    }\n                    transformString = 'translate(-50%, -50%) ' + offset + scale;\n                    this.rippleElement_.style.webkitTransform = transformString;\n                    this.rippleElement_.style.msTransform = transformString;\n                    this.rippleElement_.style.transform = transformString;\n                    if (start) {\n                        this.rippleElement_.classList.remove(this.CssClasses_.IS_ANIMATING);\n                    } else {\n                        this.rippleElement_.classList.add(this.CssClasses_.IS_ANIMATING);\n                    }\n                }\n            };\n            this.animFrameHandler = function () {\n                if (this.frameCount_-- > 0) {\n                    window.requestAnimationFrame(this.animFrameHandler.bind(this));\n                } else {\n                    this.setRippleStyles(false);\n                }\n            };\n        }\n    }\n};\n/**\n   * Downgrade the component\n   *\n   * @private\n   */\nMaterialRipple.prototype.mdlDowngrade_ = function () {\n    this.element_.removeEventListener('mousedown', this.boundDownHandler);\n    this.element_.removeEventListener('touchstart', this.boundDownHandler);\n    this.element_.removeEventListener('mouseup', this.boundUpHandler);\n    this.element_.removeEventListener('mouseleave', this.boundUpHandler);\n    this.element_.removeEventListener('touchend', this.boundUpHandler);\n    this.element_.removeEventListener('blur', this.boundUpHandler);\n};\n// The component registers itself. It can assume componentHandler is available\n// in the global scope.\ncomponentHandler.register({\n    constructor: MaterialRipple,\n    classAsString: 'MaterialRipple',\n    cssClass: 'mdl-js-ripple-effect',\n    widget: false\n});\n}());\n"],"sourceRoot":"/source/"}